library(caret)
library(glmnet)
library(fastDummies)
combined_data$severity <- log(combined_data$Total_claim_amount / combined_data$claim_nb)
UNSW_claims_data_raw = read.csv("data/UNSW_claims_data.csv", header=TRUE )
UNSW_claims_data = UNSW_claims_data_raw
library(dplyr)
library(ggplot2)
library(lubridate)
UNSW_claims_data_raw = read.csv("data/UNSW_claims_data.csv", header=TRUE )
UNSW_claims_data_raw = read.csv("data/UNSW_claims_data.csv", header=TRUE )
setwd("C:/Users/samyu/code/actl4305")
UNSW_claims_data_raw = read.csv("data/UNSW_claims_data.csv", header=TRUE )
install.packages("tweedie")
install.packages("statmod")
library(dplyr)
library(ggplot2)
library(lubridate)
library(readxl)
UNSW_claims_data_raw = read.csv("data/UNSW_claims_data.csv", header=TRUE )
UNSW_claims_data_raw = read.csv("data/UNSW_claims_data.csv", header=TRUE )
UNSW_claims_data = UNSW_claims_data_raw
library(dplyr)
library(ggplot2)
library(lubridate)
library(readxl)
UNSW_claims_data_raw = read.csv("data/UNSW_claims_data.csv", header=TRUE )
library(dplyr)
library(ggplot2)
library(lubridate)
library(readxl)
UNSW_claims_data_raw = read.csv("data/UNSW_claims_data.csv", header=TRUE )
load("C:/Users/User/OneDrive/Documents/GitHub/ACTL4305/.RData")
load("C:/Users/User/OneDrive/Documents/GitHub/ACTL4305/.RData")
vars.to.remove <- c("exposure_id", "pet_gender", "pet_de_sexed_age", "pet_is_switcher", "nb_address_type_adj", "nb_suburb", "nb_state", "person_dob", "owner_age_years", "nb_breed_type",
"nb_breed_trait", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "earned_units", "Total_Earned", "claim_nb", "Total_claim_amount",
"Total_claim_paid", "severity", "frequency", "is_multi_plan", "quote_time_group", "sa2_code", "nb_postcode", "is_multi_pet_plan", "pet_age_year")
frequency.model.data <- combined_data[,-which(colnames(combined_data) %in% vars.to.remove)]
frequency.model.data$qi <- as.factor(frequency.model.data$qi)
colnames(frequency.model.data)
frequency.model.data <- na.omit(frequency.model.data)
str(frequency.model.data)
#Splitting into test and training
set.seed(2131)
freq_training_val_index <- sample(1:nrow(frequency.model.data), 0.7*nrow(frequency.model.data))
freq_training_val <- frequency.model.data[freq_training_val_index, ]
freq_test <- frequency.model.data[-freq_training_val_index, ]
freq_training_val <- freq_training_val %>%
mutate(across(where(is.character), as.factor))
library(dplyr)
freq_training_val <- freq_training_val %>%
mutate(across(where(is.character), as.factor))
# Create a mapping of factor levels from training data
factor_mapping <- lapply(freq_training_val, function(x) {
if (is.factor(x)) {
return(levels(x))  # Store levels for each factor
} else {
return(NULL)  # Return NULL for non-factor columns
}
})
# Remove NULL entries to get only factor mappings
factor_mapping <- Filter(Negate(is.null), factor_mapping)
names(factor_mapping) <- names(freq_training_val)[sapply(freq_training_val, is.factor)]  # Name the list with corresponding column names
# Convert character columns in freq_pred_data to factors
freq_pred_data <- freq_pred_data %>%
mutate(across(where(is.character), ~ ifelse(. == "true", 1, ifelse(. == "false", 2, .)))) %>%
mutate(across(where(is.character), as.factor))
# Ensure the same factor levels in freq_pred_data
for (col_name in names(factor_mapping)) {
if (col_name %in% colnames(freq_pred_data)) {
# Set the levels of the factors in freq_pred_data to match those in freq_training_val
levels(freq_pred_data[[col_name]]) <- factor_mapping[[col_name]]
}
}
# Convert factors to numeric in freq_pred_data
freq_pred_data <- freq_pred_data %>%
mutate(across(where(is.factor), as.numeric))
# Check structures to confirm consistency
str(freq_training_val)
str(freq_pred_data)
freq_training_val <- freq_training_val %>%
mutate(across(where(is.character), as.factor))
# Create a mapping of factor levels from training data
factor_mapping <- lapply(freq_training_val, function(x) {
if (is.factor(x)) {
return(levels(x))  # Store levels for each factor
} else {
return(NULL)  # Return NULL for non-factor columns
}
})
# Remove NULL entries to get only factor mappings
factor_mapping <- Filter(Negate(is.null), factor_mapping)
names(factor_mapping) <- names(freq_training_val)[sapply(freq_training_val, is.factor)]  # Name the list with corresponding column names
# Convert character columns in freq_pred_data to factors
freq_pred_data <- freq_pred_data %>%
mutate(across(where(is.character), ~ ifelse(. == "true", 1, ifelse(. == "false", 2, .)))) %>%
mutate(across(where(is.character), as.factor))
# Ensure the same factor levels in freq_pred_data
for (col_name in names(factor_mapping)) {
if (col_name %in% colnames(freq_pred_data)) {
# Set the levels of the factors in freq_pred_data to match those in freq_training_val
levels(freq_pred_data[[col_name]]) <- factor_mapping[[col_name]]
}
}
# Convert factors to numeric in freq_pred_data
freq_pred_data <- freq_pred_data %>%
mutate(across(where(is.factor), as.numeric))
# Check structures to confirm consistency
str(freq_training_val)
str(freq_pred_data)
freq_training_val <- freq_training_val %>%
mutate(across(where(is.character), as.factor))
# Create a mapping of factor levels from training data
factor_mapping <- lapply(freq_training_val, function(x) {
if (is.factor(x)) {
return(levels(x))  # Store levels for each factor
} else {
return(NULL)  # Return NULL for non-factor columns
}
})
# Remove NULL entries to get only factor mappings
factor_mapping <- Filter(Negate(is.null), factor_mapping)
names(factor_mapping) <- names(freq_training_val)[sapply(freq_training_val, is.factor)]  # Name the list with corresponding column names
# Convert character columns in freq_pred_data to factors
freq_pred_data <- freq_pred_data %>%
mutate(across(where(is.character), ~ ifelse(. == "true", 1, ifelse(. == "false", 2, .)))) %>%
mutate(across(where(is.character), as.factor))
# Ensure the same factor levels in freq_pred_data
for (col_name in names(factor_mapping)) {
if (col_name %in% colnames(freq_pred_data)) {
# Set the levels of the factors in freq_pred_data to match those in freq_training_val
levels(freq_pred_data[[col_name]]) <- factor_mapping[[col_name]]
}
}
# Convert factors to numeric in freq_pred_data
freq_pred_data <- freq_pred_data %>%
mutate(across(where(is.factor), as.numeric))
freq_pred_data$quote_date <- as.Date(freq_pred_data$quote_date)
freq_pred_data$nb_breed_trait_num_encoded <- as.numeric(freq_pred_data$nb_breed_trait_num_encoded)
freq_pred_data$tenure <- as.integer(freq_pred_data$tenure)
freq_pred_data$pet_age_months <- as.integer(freq_pred_data$pet_age_months)
freq_pred_data$nb_contribution <- as.integer(freq_pred_data$nb_contribution)
freq_pred_data$nb_excess <- as.integer(freq_pred_data$nb_excess)
freq_pred_data$nb_number_of_breeds <- as.integer(freq_pred_data$nb_number_of_breeds)
freq_pred_data$nb_contribution_excess <- as.integer(freq_pred_data$nb_contribution_excess)
predicted.values <- predict(tweedie_freq_model, newdata = freq_pred_data, type = "response")
min(predicted.values)
max(predicted.values)
