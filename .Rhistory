sd_claim <- sd(frequency.model.data$claim_freq, na.rm = TRUE)
ggplot(frequency.model.data, aes(x = claim_freq)) +
geom_density(fill = "lightblue", color = "darkblue", alpha = 0.6) +
stat_function(fun = dnorm, args = list(mean = mean_claim, sd = sd_claim),
color = "red", linetype = "dashed", size = 1) +
labs(title = "Density Plot of Claim Frequency with Normal Curve",
x = "Claim Frequency",
y = "Density") +
theme_minimal() +
xlim(0, 1)
## Shifting observations were claim_freq is observed to be 0 such that gamma is appropriate
freq_gamma_training_val <- freq_training_val
for (i in 1:nrow(freq_gamma_training_val)) {
if (freq_gamma_training_val$claim_freq[i] == 0) {
freq_gamma_training_val$claim_freq[i] <- 0.001
}
}
gamma_frequency_glm <- glm(claim_freq ~., data = freq_gamma_training_val, family = Gamma(link = "log"))
view(freq_gamma_training_val)
vars.to.remove <- c("exposure_id", "pet_gender", "pet_de_sexed_age", "pet_is_switcher", "nb_address_type_adj", "nb_suburb", "nb_state", "person_dob", "owner_age_years", "nb_breed_type",
"nb_breed_trait", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "earned_units", "Total_Earned", "claim_nb", "Total_claim_amount",
"Total_claim_paid", "severity", "frequency", "is_multi_plan", "quote_time_group", "sa2_code", "nb_postcode", "size_encoding")
frequency.model.data <- combined_data[,-which(colnames(combined_data) %in% vars.to.remove)]
frequency.model.data$qi <- as.factor(frequency.model.data$qi)
frequency.model.data <- na.omit(frequency.model.data)
set.seed(2131)
freq_training_val_index <- sample(1:nrow(frequency.model.data), 0.7*nrow(frequency.model.data))
freq_training_val <- frequency.model.data[freq_training_val_index, ]
freq_test <- frequency.model.data[-freq_training_val_index, ]
#Assessing Distribution of claim_freq
mean_claim <- mean(frequency.model.data$claim_freq, na.rm = TRUE)
sd_claim <- sd(frequency.model.data$claim_freq, na.rm = TRUE)
ggplot(frequency.model.data, aes(x = claim_freq)) +
geom_density(fill = "lightblue", color = "darkblue", alpha = 0.6) +
stat_function(fun = dnorm, args = list(mean = mean_claim, sd = sd_claim),
color = "red", linetype = "dashed", size = 1) +
labs(title = "Density Plot of Claim Frequency with Normal Curve",
x = "Claim Frequency",
y = "Density") +
theme_minimal() +
xlim(0, 1)
## Shifting observations were claim_freq is observed to be 0 such that gamma is appropriate
freq_gamma_training_val <- freq_training_val
for (i in 1:nrow(freq_gamma_training_val)) {
if (freq_gamma_training_val$claim_freq[i] == 0) {
freq_gamma_training_val$claim_freq[i] <- 0.001
}
}
gamma_frequency_glm <- glm(claim_freq ~., data = freq_gamma_training_val, family = Gamma(link = "log"))
vars.to.remove <- c("exposure_id", "pet_gender", "pet_de_sexed_age", "pet_is_switcher", "nb_address_type_adj", "nb_suburb", "nb_state", "person_dob", "owner_age_years", "nb_breed_type",
"nb_breed_trait", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "earned_units", "Total_Earned", "claim_nb", "Total_claim_amount",
"Total_claim_paid", "severity", "frequency", "is_multi_plan", "quote_time_group", "sa2_code", "nb_postcode")
frequency.model.data <- combined_data[,-which(colnames(combined_data) %in% vars.to.remove)]
frequency.model.data$qi <- as.factor(frequency.model.data$qi)
frequency.model.data <- na.omit(frequency.model.data)
str(frequency.model.data)
#Splitting into test and training
set.seed(2131)
freq_training_val_index <- sample(1:nrow(frequency.model.data), 0.7*nrow(frequency.model.data))
freq_training_val <- frequency.model.data[freq_training_val_index, ]
freq_test <- frequency.model.data[-freq_training_val_index, ]
#Assessing Distribution of claim_freq
mean_claim <- mean(frequency.model.data$claim_freq, na.rm = TRUE)
sd_claim <- sd(frequency.model.data$claim_freq, na.rm = TRUE)
ggplot(frequency.model.data, aes(x = claim_freq)) +
geom_density(fill = "lightblue", color = "darkblue", alpha = 0.6) +
stat_function(fun = dnorm, args = list(mean = mean_claim, sd = sd_claim),
color = "red", linetype = "dashed", size = 1) +
labs(title = "Density Plot of Claim Frequency with Normal Curve",
x = "Claim Frequency",
y = "Density") +
theme_minimal() +
xlim(0, 1)
## Shifting observations were claim_freq is observed to be 0 such that gamma is appropriate
freq_gamma_training_val <- freq_training_val
for (i in 1:nrow(freq_gamma_training_val)) {
if (freq_gamma_training_val$claim_freq[i] == 0) {
freq_gamma_training_val$claim_freq[i] <- 0.001
}
}
gamma_frequency_glm <- glm(claim_freq ~., data = freq_gamma_training_val, family = Gamma(link = "log"))
str(freq_gamma_training_val)
max(freq_gamma_training_val$claim_freq)
min(freq_gamma_training_val$claim_freq)
which(colnames(freq_gamma_training_val) == "claim_freq")
freq_gamma_training_val[,-which(colnames(freq_gamma_training_val) == "claim_freq")] <- scale(freq_gamma_training_val[,-which(colnames(freq_gamma_training_val) == "claim_freq")])
numeric_cols <- sapply(freq_gamma_training_val, is.numeric)
numeric_cols
freq_gamma_training_val[,numeric_cols <- sapply(freq_gamma_training_val, is.numeric)]
numeric_cols <- sapply(freq_gamma_training_val, is.numeric)]
numeric_cols <- sapply(freq_gamma_training_val, is.numeric)
freq_gamma_training_val[, (numeric_cols & -which(colnames(freq_gamma_training_val) == "claim_freq"))]
colnames(freq_gamma_training_val[, (numeric_cols & -which(colnames(freq_gamma_training_val) == "claim_freq"))])
freq_gamma_training_val <- freq_gamma_training_val %>%
mutate(across(where(is.numeric) & !starts_with("claim_freq"), scale))
gamma_frequency_glm <- glm(claim_freq ~., data = freq_gamma_training_val, family = Gamma(link = "log"))
freq_gamma_training_val
gamma_frequency_glm <- glm(claim_freq ~., data = freq_gamma_training_val, family = Gamma(link = "log"))
vars.to.remove <- c("exposure_id", "pet_gender", "pet_de_sexed_age", "pet_is_switcher", "nb_address_type_adj", "nb_suburb", "nb_state", "person_dob", "owner_age_years", "nb_breed_type",
"nb_breed_trait", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "earned_units", "Total_Earned", "claim_nb", "Total_claim_amount",
"Total_claim_paid", "severity", "frequency", "is_multi_plan", "quote_time_group", "sa2_code", "nb_postcode")
frequency.model.data <- combined_data[,-which(colnames(combined_data) %in% vars.to.remove)]
frequency.model.data$qi <- as.factor(frequency.model.data$qi)
frequency.model.data <- na.omit(frequency.model.data)
str(frequency.model.data)
#Splitting into test and training
set.seed(2131)
freq_training_val_index <- sample(1:nrow(frequency.model.data), 0.7*nrow(frequency.model.data))
freq_training_val <- frequency.model.data[freq_training_val_index, ]
freq_test <- frequency.model.data[-freq_training_val_index, ]
#Assessing Distribution of claim_freq
mean_claim <- mean(frequency.model.data$claim_freq, na.rm = TRUE)
sd_claim <- sd(frequency.model.data$claim_freq, na.rm = TRUE)
ggplot(frequency.model.data, aes(x = claim_freq)) +
geom_density(fill = "lightblue", color = "darkblue", alpha = 0.6) +
stat_function(fun = dnorm, args = list(mean = mean_claim, sd = sd_claim),
color = "red", linetype = "dashed", size = 1) +
labs(title = "Density Plot of Claim Frequency with Normal Curve",
x = "Claim Frequency",
y = "Density") +
theme_minimal() +
xlim(0, 1)
## Shifting observations were claim_freq is observed to be 0 such that gamma is appropriate
freq_gamma_training_val <- freq_training_val
for (i in 1:nrow(freq_gamma_training_val)) {
if (freq_gamma_training_val$claim_freq[i] == 0) {
freq_gamma_training_val$claim_freq[i] <- 0.001
}
}
#scaling predictors
freq_gamma_training_val <- freq_gamma_training_val %>%
mutate(across(where(is.numeric) & !starts_with("claim_freq"), scale))
gamma_frequency_glm <- glm(claim_freq ~., data = freq_gamma_training_val, family = Gamma(link = "log"))
inverse_gaussian_glm <- glm(claim_freq ~., data = freq_training_val, family = inverse.gaussian(link = "log"))
inverse_gaussian_glm <- glm(claim_freq ~., data = freq_gamma_training_val, family = inverse.gaussian(link = "log"))
library(randomForest)
freq_rf <- randomForest(claim_freq ~., data = freq_training_val, ntree = 100)
freq_rf$mse
freq_rf <- randomForest(claim_freq ~., data = freq_training_val, ntree = 100, importance = TRUE)
importance(freq_rf)
mse_importance <- importance(freq_rf)[,"%IncMse"]
importance <- importance(freq_rf)
importance_mse <- importance[,"%IncMse"]
importance <- importance(freq_rf)
importance_mse <- importance[,"%IncMse"]
importance
importance_mse <- importance[,"MeanDecreaseMSE"]
oob_error <- freq_rf$err.rate[nrow(freq_rf$err.rate), "OOB"]
print(paste("OOB Error Rate:", round(oob_error, 2)))
freq_rf
oob_error <- freq_rf$err.rate[nrow(freq_rf$err.rate), "OOB"]
print(paste("OOB Error Rate:", round(oob_error, 2)))
importance <- importance(freq_rf)
importance
mse_importance_val <- importance[,1]
mse_importance_val
importance
mse_importance_val <- importance[,1]
mse_importance_val
importance
mse_importance_val <- importance[,"%IncMSE"]
mse_importance_val
mse_importance_val <-as.data.frame(mse_importance_val)
mse_importance_val
mse_importance_val <-as.data.frame(mse_importance_val)
colnames(mse_importance_val) <- C("Predictor", "%IncMSE")
mse_importance_val <- importance[,"%IncMSE"]
mse_importance_val <-as.data.frame(mse_importance_val)
mse_importance_val
colnames(mse_importance_val)
dim(mse_importance_val)
importance <- importance(freq_rf)
mse_importance_val <- importance[,"%IncMSE"]
mse_importance_val
importance_values <- importance(freq_rf)
mse_importance <- importance_values[, "%IncMSE"]
mse_df <- data.frame(Variable = rownames(importance_values), MSE = mse_importance)
ggplot(mse_df, aes(x = reorder(Variable, MSE), y = MSE)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +  # Flips the axes for better readability
labs(title = "Variable Importance (Mean Decrease MSE)",
x = "Variables",
y = "Mean Decrease MSE") +
theme_minimal()
freq_rf <- randomForest(claim_freq ~., data = freq_training_val, ntree = 100, importance = TRUE)
importance_values <- importance(freq_rf)
mse_importance <- importance_values[, "%IncMSE"]
mse_df <- data.frame(Variable = rownames(importance_values), MSE = mse_importance)
ggplot(mse_df, aes(x = reorder(Variable, MSE), y = MSE)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +  # Flips the axes for better readability
labs(title = "Variable Importance (Mean Decrease MSE)",
x = "Variables",
y = "Mean Decrease MSE") +
theme_minimal()
freq_rf <- randomForest(claim_freq ~., data = freq_training_val, ntree = 100, importance = TRUE)
importance_values <- importance(freq_rf)
mse_importance <- importance_values[, "%IncMSE"]
mse_df <- data.frame(Variable = rownames(importance_values), MSE = mse_importance)
ggplot(mse_df, aes(x = reorder(Variable, MSE), y = MSE)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +  # Flips the axes for better readability
labs(title = "Variable Importance (Mean Decrease MSE)",
x = "Variables",
y = "Mean Decrease MSE") +
theme_minimal()
freq_rf_prediction <- predict(freq_rf, newdata = freq_test, type = "response")
freq_rf_prediction
freq_rf_prediction <- as.vector(freq_rf_prediction)
freq_rf_prediction
freq_test$claim_freq
freq_rf_prediction
freq_rf_test_mse <- mean((freq_rf_prediction - freq_test$claim_freq))
freq_rf_test_mse
freq_rf_prediction[freq_rf_prediction < 0] <- 0
freq_rf_test_mse <- mean((freq_rf_prediction - freq_test$claim_freq))
freq_rf_test_mse
freq_rf_prediction <- predict(freq_rf, newdata = freq_test)
freq_rf_prediction <- as.vector(freq_rf_prediction)
freq_rf_prediction[freq_rf_prediction < 0] <- 0 #setting negative predictions to 0
freq_rf_test_mse <- mean((freq_rf_prediction - freq_test$claim_freq))
freq_rf_test_mse
rf_training_pridictions <- predict(freq_rf, newdata = freq_training_val)
rf_training_pridictions <- as.vector(rf_training_pridictions)
training_mse_rf <- mean((rf_training_pridictions - freq_training_val$claim_freq)^2)
training_mse_rf
freq_training_val <- sapply(freq_training_val, is.numeric)
freq_training_val_numeric_predictors <- sapply(freq_training_val, is.numeric)
freq_training_val_numeric_predictors
vars.to.remove <- c("exposure_id", "pet_gender", "pet_de_sexed_age", "pet_is_switcher", "nb_address_type_adj", "nb_suburb", "nb_state", "person_dob", "owner_age_years", "nb_breed_type",
"nb_breed_trait", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "earned_units", "Total_Earned", "claim_nb", "Total_claim_amount",
"Total_claim_paid", "severity", "frequency", "is_multi_plan", "quote_time_group", "sa2_code", "nb_postcode")
frequency.model.data <- combined_data[,-which(colnames(combined_data) %in% vars.to.remove)]
frequency.model.data$qi <- as.factor(frequency.model.data$qi)
frequency.model.data <- na.omit(frequency.model.data)
str(frequency.model.data)
#Splitting into test and training
set.seed(2131)
freq_training_val_index <- sample(1:nrow(frequency.model.data), 0.7*nrow(frequency.model.data))
freq_training_val <- frequency.model.data[freq_training_val_index, ]
freq_test <- frequency.model.data[-freq_training_val_index, ]
freq_training_val_numeric_predictors <- sapply(freq_training_val, is.numeric)
freq_training_val_numeric_predictors
freq_training_val[,freq_training_val_numeric_predictors]
plot(freq_training_val$tenure, freq_training_val$claim_freq)
plot(freq_training_val$pet_age_months, freq_training_val$claim_freq)
plot(freq_training_val$density, freq_training_val$claim_freq)
freq_rf <- randomForest(claim_freq ~., data = freq_training_val, ntree = 100, importance = TRUE)
#Training fit
rf_training_pridictions <- predict(freq_rf, newdata = freq_training_val)
rf_training_pridictions <- as.vector(rf_training_pridictions)
training_mse_rf <- mean((rf_training_pridictions - freq_training_val$claim_freq)^2)
freq_rf$mse
#Variable Importance
importance_values <- importance(freq_rf)
mse_importance <- importance_values[, "%IncMSE"]
mse_df <- data.frame(Variable = rownames(importance_values), MSE = mse_importance)
ggplot(mse_df, aes(x = reorder(Variable, MSE), y = MSE)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +  # Flips the axes for better readability
labs(title = "Variable Importance (Mean Decrease MSE)",
x = "Variables",
y = "Mean Decrease MSE") +
theme_minimal()
#Test Performance
freq_rf_prediction <- predict(freq_rf, newdata = freq_test)
freq_rf_prediction <- as.vector(freq_rf_prediction)
freq_rf_prediction[freq_rf_prediction < 0] <- 0 #setting negative predictions to 0
freq_rf_test_mse <- mean((freq_rf_prediction - freq_test$claim_freq)^2)
freq_rf_test_mse
training_mse_rf
full_frequency_LR <- lm(claim_freq, data = freq_training_val)
freq_training_val
vars.to.remove <- c("exposure_id", "pet_gender", "pet_de_sexed_age", "pet_is_switcher", "nb_address_type_adj", "nb_suburb", "nb_state", "person_dob", "owner_age_years", "nb_breed_type",
"nb_breed_trait", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "earned_units", "Total_Earned", "claim_nb", "Total_claim_amount",
"Total_claim_paid", "severity", "frequency", "is_multi_plan", "quote_time_group", "sa2_code", "nb_postcode")
frequency.model.data <- combined_data[,-which(colnames(combined_data) %in% vars.to.remove)]
frequency.model.data$qi <- as.factor(frequency.model.data$qi)
frequency.model.data <- na.omit(frequency.model.data)
str(frequency.model.data)
#Splitting into test and training
set.seed(2131)
freq_training_val_index <- sample(1:nrow(frequency.model.data), 0.7*nrow(frequency.model.data))
freq_training_val <- frequency.model.data[freq_training_val_index, ]
freq_test <- frequency.model.data[-freq_training_val_index, ]
full_frequency_LR <- lm(claim_freq, data = freq_training_val)
freq_training_val
view(freq_training_val)
full_frequency_LR <- lm(claim_freq~., data = freq_training_val)
summary(full_frequency_LR)
plot(full_frequency_LR)
summary(full_frequency_LR)
assumption_summaryplot <- plot(full_frequency_LR)
full_frequency_LR$residuals
full_freq_LR_training_MSE <- mean(full_frequency_LR$residuals^2)
full_freq_LR_training_MSE
library(MASS)
full_frequency_LR <- lm(claim_freq~., data = freq_training_val)
summary(full_frequency_LR)
assumption_summaryplot <- plot(full_frequency_LR)
full_freq_LR_training_MSE <- mean(full_frequency_LR$residuals^2)
full_frequency_LR_summary <- summary(full_frequency_LR)
full_frequency_LR_summary$adj.r.squared
full_frequency_LR_summary$fstatistic
full_freq_AIC <- AIC(full_frequency_LR)
full_freq_AIC
full_freq_predicted_values <- predict(full_frequency_LR, newdata = freq_test, type = "response")
full_freq_predicted_values <- as.vector(full_freq_predicted_values)
fill_freq_test_MSE <- mean((full_freq_predicted_values - freq_test$claim_freq)^2)
full_freq_test_MSE <- mean((full_freq_predicted_values - freq_test$claim_freq)^2)
full_freq_test_MSE
stepwise_model_freq <- stepAIC(full_frequency_LR, direction = "both")
stepwise_model_freq
stepwise_model_freq_summary <- summary(stepwise_model_freq)
stepwise_model_freq_summary
stepwise_model_freq_summary$adj.r.squared
stepwise_model_freq_training_MSE <- mean(stepwise_model_freq_summary$residuals^2)
stepwise_model_freq_training_MSE
AIC(stepwise_model_freq)
stepwise_model_freq_predicted_values <- predict(stepwise_model_freq, newdata = freq_test, type = "response")
stepwise_model_freq_predicted_values <- as.vector(stepwise_model_freq_predicted_values)
stepwise_freq_model_test_MSE <- mean((stepwise_model_freq_predicted_values-freq_test$claim_freq)^2)
stepwise_freq_model_test_MSE
X.training <- as.matrix(freq_training_val[,-which(colnames(freq_training_val) == "claim_freq")])
Y.training <- freq_training_val$claim_freq
cv.glmnet(X.training, Y.training, alpha = 1)
library(glmnet)
cv.glmnet(X.training, Y.training, alpha = 1)
str(freq_training_val)
X.training <- model.matrix(X.training)[,-1]
X.training <- model.matrix(claim_freq~., data = freq_training_val)
X.training
x.training$claim_freq
X.training$claim_freq
view(X.training)
Y.training <- freq_training_val$claim_freq
X.training <- model.matrix(claim_freq~., data = freq_training_val)
nrow(X.training)
nrow(Y.training)
Y.training <- freq_training_val$claim_freq
nrow(Y.training)
freq_training_val
vars.to.remove <- c("exposure_id", "pet_gender", "pet_de_sexed_age", "pet_is_switcher", "nb_address_type_adj", "nb_suburb", "nb_state", "person_dob", "owner_age_years", "nb_breed_type",
"nb_breed_trait", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "earned_units", "Total_Earned", "claim_nb", "Total_claim_amount",
"Total_claim_paid", "severity", "frequency", "is_multi_plan", "quote_time_group", "sa2_code", "nb_postcode")
frequency.model.data <- combined_data[,-which(colnames(combined_data) %in% vars.to.remove)]
frequency.model.data$qi <- as.factor(frequency.model.data$qi)
frequency.model.data <- na.omit(frequency.model.data)
str(frequency.model.data)
#Splitting into test and training
set.seed(2131)
freq_training_val_index <- sample(1:nrow(frequency.model.data), 0.7*nrow(frequency.model.data))
freq_training_val <- frequency.model.data[freq_training_val_index, ]
freq_test <- frequency.model.data[-freq_training_val_index, ]
X.training <- model.matrix(claim_freq~., data = freq_training_val)
Y.training <- freq_training_val$claim_freq
nrow(X.training)
nrow(Y.training)
Y.training <- freq_training_val$claim_freq
length(Y.training)
cv.glmnet(X.training, Y.training, alpha = 1)
freq_lasso_model <- cv.glmnet(X.training, Y.training, alpha = 1)
lasso_optimal_lambda <- freq_lasso_model$lambda.min
lasso_optimal_lambda
final_freq_lasso_model <- glmnet(X.training, Y.training, lambda = lasso_optimal_lambda, alpha = 1)
summary(final_freq_lasso_model)
coef(final_freq_lasso_model)
x.test <- model.matrix(claim_freq~., data = freq_test)
y.test <- freq_test$claim_freq
predict(final_freq_lasso_model, newx = x.test, type = "response")
lasso_prediction_freq <- predict(final_freq_lasso_model, newx = x.test, type = "response")
lasso_prediction_freq
lasso_prediction_freq <- as.vector(lasso_prediction_freq)
lasso_prediction_freq
lasso_test_mse <- mean((lasso_prediction_freq - y.test)^2)
lasso_test_mse
AIC(final_freq_lasso_model)
lasso_summary_freq <- summary(final_freq_lasso_model)
lasso_summary_freq
lasso_summary_freq$call
freq_ridge_model <- cv.glmnet(X.training, Y.training, alpha = 0)
ridge_optimal_lambda <- freq_ridge_model$lambda.min
final_ridge_model_freq <- glmnet(X.training, Y.training, lambda = ridge_optimal_lambda, alpha = 0)
coef(final_ridge_model_freq)
ridge_freq_predictions <- predict(final_ridge_model_freq, newx = x.test, type = "response")
ridge_freq_predictions <- as.vector(ridge_freq_predictions)
ridge_test_mse <- mean((ridge_freq_predictions - y.test)^2)
ridge_test_mse
lasso_test_mse
cv_fit <- cv.glmnet(X.training, Y.training, alpha = seq(0,1, by = 0.1), nfolds = 10)
set.seed(123) # For reproducibility
alpha_values <- seq(0, 1, by = 0.1)
results <- data.frame(alpha = numeric(), lambda.min = numeric(), mse = numeric())
for (alpha in alpha_values) {
cv_fit <- cv.glmnet(X.training, Y.training, alpha = alpha, nfolds = 10)
results <- rbind(results, data.frame(alpha = alpha,
lambda.min = cv_fit$lambda.min,
mse = min(cv_fit$cvm)))
}
best_alpha <- results[which.min(results$mse), "alpha"]
best_lambda <- results[which.min(results$mse), "lambda.min"]
best_alpha
best_lambda
final_elastic_net_model <- glmnet(X.training, Y.training, alpha = best_alpha, lambda = best_lambda)
elastic_freq_predictions <- predict(final_elastic_net_model, newx = x.test, type = "response")
elastic_freq_predictions <- as.vector(elastic_freq_predictions)
elastic_test_mse <- mean((elastic_freq_predictions - y.test)^2)
elastic_test_mse
coef(final_elastic_net_model)
summary(final_elastic_net_model)
min(results$mse)
elastic_net_cve <- min(results$mse)
vars.to.remove <- c("exposure_id", "pet_gender", "pet_de_sexed_age", "pet_is_switcher", "nb_address_type_adj", "nb_suburb", "nb_state", "person_dob", "owner_age_years", "nb_breed_type",
"nb_breed_trait", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "earned_units", "Total_Earned", "claim_nb", "Total_claim_amount",
"Total_claim_paid", "severity", "frequency", "is_multi_plan", "quote_time_group", "sa2_code", "nb_postcode")
frequency.model.data <- combined_data[,-which(colnames(combined_data) %in% vars.to.remove)]
frequency.model.data$qi <- as.factor(frequency.model.data$qi)
frequency.model.data <- na.omit(frequency.model.data)
str(frequency.model.data)
#Splitting into test and training
set.seed(2131)
freq_training_val_index <- sample(1:nrow(frequency.model.data), 0.7*nrow(frequency.model.data))
freq_training_val <- frequency.model.data[freq_training_val_index, ]
freq_test <- frequency.model.data[-freq_training_val_index, ]
######random forest model
freq_rf <- randomForest(claim_freq ~., data = freq_training_val, ntree = 100, importance = TRUE)
#Training fit
rf_training_pridictions <- predict(freq_rf, newdata = freq_training_val)
rf_training_pridictions <- as.vector(rf_training_pridictions)
training_mse_rf <- mean((rf_training_pridictions - freq_training_val$claim_freq)^2)
freq_rf$mse
#Variable Importance
importance_values <- importance(freq_rf)
mse_importance <- importance_values[, "%IncMSE"]
mse_df <- data.frame(Variable = rownames(importance_values), MSE = mse_importance)
ggplot(mse_df, aes(x = reorder(Variable, MSE), y = MSE)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +  # Flips the axes for better readability
labs(title = "Variable Importance (Mean Decrease MSE)",
x = "Variables",
y = "Mean Decrease MSE") +
theme_minimal()
#Test Performance
freq_rf_prediction <- predict(freq_rf, newdata = freq_test)
freq_rf_prediction <- as.vector(freq_rf_prediction)
freq_rf_prediction[freq_rf_prediction < 0] <- 0 #setting negative predictions to 0
freq_rf_test_mse <- mean((freq_rf_prediction - freq_test$claim_freq)^2)
#########Full Linear Regression########
full_frequency_LR <- lm(claim_freq~., data = freq_training_val) #training
#Summary and Training Performace
full_frequency_LR_summary <- summary(full_frequency_LR)
assumption_summaryplot <- plot(full_frequency_LR)
full_freq_LR_training_MSE <- mean(full_frequency_LR$residuals^2)
full_frequency_LR_summary$adj.r.squared
full_frequency_LR_summary$fstatistic
full_freq_AIC <- AIC(full_frequency_LR)
#Test Performance
full_freq_predicted_values <- predict(full_frequency_LR, newdata = freq_test, type = "response")
full_freq_predicted_values <- as.vector(full_freq_predicted_values)
full_freq_test_MSE <- mean((full_freq_predicted_values - freq_test$claim_freq)^2)
####Step wise Linear Regression####
stepwise_model_freq <- stepAIC(full_frequency_LR, direction = "both")
stepwise_model_freq_summary <- summary(stepwise_model_freq)
stepwise_model_freq_summary$adj.r.squared
stepwise_model_freq_training_MSE <- mean(stepwise_model_freq_summary$residuals^2)
AIC(stepwise_model_freq)
#test performance
stepwise_model_freq_predicted_values <- predict(stepwise_model_freq, newdata = freq_test, type = "response")
stepwise_model_freq_predicted_values <- as.vector(stepwise_model_freq_predicted_values)
stepwise_freq_model_test_MSE <- mean((stepwise_model_freq_predicted_values-freq_test$claim_freq)^2)
####Lasso Model####
X.training <- model.matrix(claim_freq~., data = freq_training_val)
Y.training <- freq_training_val$claim_freq
freq_lasso_model <- cv.glmnet(X.training, Y.training, alpha = 1)
lasso_optimal_lambda <- freq_lasso_model$lambda.min
final_freq_lasso_model <- glmnet(X.training, Y.training, lambda = lasso_optimal_lambda, alpha = 1)
coef(final_freq_lasso_model)
#Test Performance
x.test <- model.matrix(claim_freq~., data = freq_test)
y.test <- freq_test$claim_freq
lasso_prediction_freq <- predict(final_freq_lasso_model, newx = x.test, type = "response")
lasso_prediction_freq <- as.vector(lasso_prediction_freq)
lasso_test_mse <- mean((lasso_prediction_freq - y.test)^2)
###Ridge###
freq_ridge_model <- cv.glmnet(X.training, Y.training, alpha = 0)
ridge_optimal_lambda <- freq_ridge_model$lambda.min
final_ridge_model_freq <- glmnet(X.training, Y.training, lambda = ridge_optimal_lambda, alpha = 0)
coef(final_ridge_model_freq)
#test performance#
ridge_freq_predictions <- predict(final_ridge_model_freq, newx = x.test, type = "response")
ridge_freq_predictions <- as.vector(ridge_freq_predictions)
ridge_test_mse <- mean((ridge_freq_predictions - y.test)^2)
###Elastic Net###
set.seed(12313)
alpha_values <- seq(0, 1, by = 0.1)
results <- data.frame(alpha = numeric(), lambda.min = numeric(), mse = numeric())
for (alpha in alpha_values) {
cv_fit <- cv.glmnet(X.training, Y.training, alpha = alpha, nfolds = 10)
results <- rbind(results, data.frame(alpha = alpha,
lambda.min = cv_fit$lambda.min,
mse = min(cv_fit$cvm)))
}
best_alpha <- results[which.min(results$mse), "alpha"]
best_lambda <- results[which.min(results$mse), "lambda.min"]
final_elastic_net_model <- glmnet(X.training, Y.training, alpha = best_alpha, lambda = best_lambda)
coef(final_elastic_net_model)
summary(final_elastic_net_model)
elastic_net_cve <- min(results$mse)
##test performance
elastic_freq_predictions <- predict(final_elastic_net_model, newx = x.test, type = "response")
elastic_freq_predictions <- as.vector(elastic_freq_predictions)
elastic_test_mse <- mean((elastic_freq_predictions - y.test)^2)
