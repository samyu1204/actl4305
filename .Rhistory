##Investigating each variable
# par(mfrow = c(2, 2))
######################### delete above later
#UNSW Earned Data
##Cleaning the data
UNSW_earned_data$UW_Date= as.Date(UNSW_earned_data$UW_Date)
UNSW_earned_data$pet_gender = as.factor(UNSW_earned_data$pet_gender)
UNSW_earned_data$pet_de_sexed = as.factor(UNSW_earned_data$pet_de_sexed)
#UNSW_earned_data$pet_de_sexed_age=as.numeric(UNSW_earned_data$pet_de_sexed_age)
UNSW_earned_data$pet_is_switcher= as.factor(UNSW_earned_data$pet_is_switcher)
UNSW_earned_data$nb_policy_first_inception_date = as.Date(UNSW_earned_data$nb_policy_first_inception_date)
UNSW_earned_data$nb_address_type_adj = as.factor(UNSW_earned_data$nb_address_type_adj)
UNSW_earned_data$nb_breed_name_unique = as.factor(UNSW_earned_data$nb_breed_name_unique)
UNSW_earned_data$nb_breed_name_unique_concat = as.factor(UNSW_earned_data$nb_breed_name_unique_concat)
UNSW_earned_data$is_multi_pet_plan = as.factor(UNSW_earned_data$is_multi_pet_plan)
UNSW_earned_data = UNSW_earned_data %>% select(-X)
UNSW_earned_data$nb_state = as.factor(UNSW_earned_data$nb_state)
UNSW_earned_data$person_dob = as.Date(UNSW_earned_data$person_dob)
UNSW_earned_data$nb_breed_type = as.factor(UNSW_earned_data$nb_breed_type)
UNSW_earned_data$nb_breed_trait = as.factor(UNSW_earned_data$nb_breed_trait)
UNSW_earned_data$lead_date_day = as.Date(UNSW_earned_data$lead_date_day, origin = "1970-01-01")
UNSW_earned_data$quote_date= as.Date(UNSW_earned_data$quote_date, origin = "1970-01-01")
UNSW_earned_data$quote_time_group= as.factor(UNSW_earned_data$quote_time_group)
UNSW_earned_data$nb_postcode= as.factor(UNSW_earned_data$nb_postcode)
###Removing useless row number column
UNSW_earned_data =
UNSW_earned_data %>%
select(-row_num)
## check for duplicate
sum(duplicated(UNSW_earned_data))
### check for num of unique exposure id
length(unique(UNSW_earned_data$exposure_id))
length(unique(UNSW_earned_data$exposure_id_1))
## calculate exposure units / earned units for each exposure id
exposure <- UNSW_earned_data %>%
group_by(exposure_id) %>%
summarise(Total_Earned = sum(earned_units))
## make exposure id collapse into one row only
#Ensuring that each row in UNSW_earned_data contains a unique exposure_id
collapsed_UNSW_earned_data = #Earned Data with No Repeated Exposure IDs
UNSW_earned_data %>%
group_by(exposure_id) %>%
filter(tenure == max(tenure))
collapsed_UNSW_earned_data <- left_join(collapsed_UNSW_earned_data, exposure, by = "exposure_id")
## refund for cancellation before 4 days?
zero_earned_units <- UNSW_earned_data %>% filter(earned_units == 0)
## if zero total earned units then also zero claim number
#Removing negative tenures and 0 claim_paid for covered already paid
## keep not paid cover for now
UNSW_claims_data =
UNSW_claims_data %>%
filter(claim_paid>0 | claim_status %in% c("covered_not_paid", "covered_with_exclusions_not_paid"))
## check for duplicated claim because of owner double claim / other owner related issues
## many dimension ## ignore for now
UNSW_claim_check = UNSW_claims_data %>%
select(exposure_id, total_claim_amount)
##
claim_per_exposure_id = UNSW_claims_data %>%
group_by(exposure_id) %>%
summarise(claim_nb = n(), Total_claim_amount = sum(total_claim_amount),
Total_claim_paid = sum(claim_paid), )
### Aggregate UNSW_earned_data and claim data (claim nb, claim paid and total amount)
UNSW_earned_data$claim_nb = 0
combined_data = left_join(collapsed_UNSW_earned_data, claim_per_exposure_id, by = c("exposure_id"))
combined_data = combined_data %>%
mutate(claim_nb = ifelse(is.na(claim_nb)==TRUE, 0, claim_nb))
combined_data = combined_data %>%
mutate(Total_claim_amount = ifelse(is.na(Total_claim_amount)==TRUE, 0, Total_claim_amount),
Total_claim_paid = ifelse(is.na(Total_claim_paid)==TRUE, 0, Total_claim_paid))
combined_data = combined_data %>%
filter(Total_Earned > 0) %>%
mutate(claim_freq = claim_nb/Total_Earned)
# ========================================================================================
# Check columns with NA
na_columns_remaining <- colnames(combined_data)[colSums(is.na(combined_data)) > 0]
na_columns_remaining
for (col in colnames(combined_data)) {
if (is.numeric(combined_data[[col]])) {
combined_data[[col]][is.na(combined_data[[col]])] <- mean(combined_data[[col]], na.rm = TRUE)
}
}
# =================================================================================
# Merge SA2 code onto it (needs to be fixed bcs same postcode has many SA2)
sa2_mapping <- read_excel("data/sa2_mapping.xlsx")
sa2_mapping$nb_postcode <- as.factor(sa2_mapping$nb_postcode)
names(combined_data)
combined_data_sa2 = left_join(combined_data, sa2_mapping, "SA2_CODE", by = c("nb_postcode"))
### IGNORE FOR NOW
## row 1 and 5409 has many-to-many relationship
combined_data_sa2[1,c("nb_postcode", "nb_suburb", "SA2_CODE", "nb_state")]
combined_data_sa2[5409,c("nb_postcode", "nb_suburb", "SA2_CODE", "nb_state")]
## manually resolve many-to-many relationship between nb_postcode
## (resolve with manually checking suburb name)
# for Row 1, suburb name = Sunshine West, so SA_2 code = 213011338
combined_data_sa2[1,c("SA2_CODE")] <- 213011338
# for Row 5409, suburb name = Hamilton (in QLD), so SA_2 code = 305031124
combined_data_sa2[5409,c("SA2_CODE")] <- 305031124
plot(density(combined_data$frequency),
main = "Density Plot with Normal Distribution",
xlab = "Frequency",
ylab = "Density",
col = "blue",
xlim = c(0,1))
combined_data
combined_data$claim_nb %>% summary
# Create predicting columns
combined_data$severity <- combined_data$Total_claim_amount / combined_data$claim_nb
combined_data$frequency <- combined_data$claim_freq
plot(density(combined_data$frequency),
main = "Density Plot with Normal Distribution",
xlab = "Frequency",
ylab = "Density",
col = "blue",
xlim = c(0,1))
mean_val <- mean(combined_data$frequency)
sd_val <- sd(combined_data$frequency)
curve(dnorm(x, mean = mean_val, sd = sd_val),
col = "red",
lwd = 2,
add = TRUE)
legend("topright", legend = c("Data Density", "Normal Distribution"),
col = c("blue", "red"), lwd = 2) ###Heavy Skew, implicates use of gamma distribution for the GLM
#Training and Validation Set
set.seed(123)
training_val_frequency_id <- sample(1:nrow(combined_data), 0.7*nrow(combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1"))
training_val_frequency <- combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
str(training_val_frequency)
str(training_val_frequency)
training_val_frequency_id <- sample(1:nrow(combined_data), 0.7*nrow(combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "nb_breed_trait"))
training_val_frequency <- combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
str(training_val_frequency)
training_val_frequency_id <- sample(1:nrow(combined_data), 0.7*nrow(combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "nb_breed_trait"))
training_val_frequency <- combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
str(training_val_frequency)
training_val_frequency_id <- sample(1:nrow(combined_data), 0.7*nrow(combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "exposure_id"))
training_val_frequency <- combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
str(training_val_frequency)
#Test Frequency
test_frequency <- combined_data[-training_val_id, "frequency"]
training_val_frequency_id <- sample(1:nrow(combined_data), 0.7*nrow(combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "exposure_id"))
training_val_frequency <- combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
str(training_val_frequency)
#Test Frequency
test_frequency <- combined_data[-training_val_id, "frequency"]
training_val_frequency_id <- sample(1:nrow(combined_data), 0.7*nrow(combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "exposure_id"))
training_val_frequency <- combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
str(training_val_frequency)
#Test Frequency
test_frequency <- combined_data[-training_val_id, "frequency"]
frequency.glm <- glm(frequency ~., data = training_val_frequency, family = poisson(link = "log"))
frequency.glm$aic
training_val_frequency_id <- sample(1:nrow(combined_data), 0.7*nrow(combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "exposure_id"))
training_val_frequency <- combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
str(training_val_frequency)
frequency.glm <- glm(frequency ~., data = training_val_frequency, family = poisson(link = "log"))
warnings()
min(training_val_frequency$frequency)
for (i in 1:nrow(training_val_frequency)) {
if(training_val_frequency[i] == 0) {
training_val_frequency[i] <- 0.001
}
}
for (i in 1:nrow(training_val_frequency)) {
if(training_val_frequency$frequency[i] == 0) {
training_val_frequency$frequency[i] <- 0.001
}
}
training_val_frequency_id <- sample(1:nrow(combined_data), 0.7*nrow(combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "exposure_id"))
training_val_frequency <- combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
for (i in 1:nrow(training_val_frequency)) {
if(training_val_frequency$frequency[i] == 0) {
training_val_frequency$frequency[i] <- 0.001
}
}
glm_gamma_frequency <- glm(frequency ~., data = training_val_frequency, family = Gamma(link = "log"))
training_val_frequency
training_val_frequency$frequency
str(training_val_frequency)
view(training_val_frequency)
library(tidyverse)
view(training_val_frequency)
cleaned_combined_data <- omit.na(combined_data)
cleaned_combined_data <- na.omit(combined_data)
cleaned_combined_data <- cleaned_combined_data %>%
filter(pet_is_switcher != "")
cleaned_combined_data
cleaned_combined_data <- cleaned_combined_data %>%
filter(pet_is_switcher != "", pet_de_sexed_age != "")
cleaned_combined_data
view(cleaned_combined_data)
cleaned_combined_data <- na.omit(combined_data)
cleaned_combined_data <- cleaned_combined_data %>%
filter(pet_is_switcher != "", pet_de_sexed_age != "")
training_val_frequency_id <- sample(1:nrow(cleaned_combined_data), 0.7*nrow(cleaned_combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(cleaned_combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "exposure_id"))
training_val_frequency <- combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
for (i in 1:nrow(training_val_frequency)) {
if(training_val_frequency$frequency[i] == 0) {
training_val_frequency$frequency[i] <- 0.001
}
}
glm_gamma_frequency <- glm(frequency ~., data = training_val_frequency, family = Gamma(link = "log"))
str(training_val_frequency)
glm_gamma_frequency <- glm(frequency ~., data = training_val_frequency, family = Gamma(link = "log"))
cleaned_combined_data <- na.omit(combined_data)
cleaned_combined_data <- cleaned_combined_data %>%
filter(pet_is_switcher != "", pet_de_sexed_age != "")
cleaned_combined_data
cleaned_combined_data <- cleaned_combined_data %>%
filter(pet_is_switcher != "", pet_de_sexed_age != "")
training_val_frequency_id <- sample(1:nrow(cleaned_combined_data), 0.7*nrow(cleaned_combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(cleaned_combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "exposure_id"))
training_val_frequency <- combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
for (i in 1:nrow(training_val_frequency)) {
if(training_val_frequency$frequency[i] == 0) {
training_val_frequency$frequency[i] <- 0.001
}
}
glm_gamma_frequency <- glm(frequency ~., data = training_val_frequency, family = Gamma(link = "log"))
training_val_frequency <- cleaned_combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
glm_gamma_frequency <- glm(frequency ~., data = training_val_frequency, family = Gamma(link = "log"))
str(training_val_frequency)
glm_gamma_frequency <- glm(frequency ~., data = training_val_frequency, family = Gamma(link = "log"))
levels(training_val_frequency$pet_gender)
levels(training_val_frequency$pet_de_sexed)
levels(training_val_frequency$pet_is_switcher)
combined_data
cleaned_combined_data <- na.omit(combined_data)
cleaned_combined_data <- cleaned_combined_data %>%
filter(pet_is_switcher != "", pet_de_sexed_age != "")
cleaned_combined_data
training_val_frequency_id <- sample(1:nrow(cleaned_combined_data), 0.7*nrow(cleaned_combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(cleaned_combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "exposure_id"))
training_val_frequency <- cleaned_combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
for (i in 1:nrow(training_val_frequency)) {
if(training_val_frequency$frequency[i] == 0) {
training_val_frequency$frequency[i] <- 0.001
}
}
str(training_val_frequency)
view(training_val_frequency)
#Test Frequency
test_frequency <- combined_data[-training_val_id, "frequency"]
glm_gamma_frequency <- glm(frequency ~., data = training_val_frequency, family = Gamma(link = "log"))
levels(training_val_frequency$pet_is_switcher)
which(training_val_frequency$pet_is_switcher == "")
training_val_frequency$pet_is_switcher <- factor(training_val_frequency$pet_is_switcher)
training_val_frequency$pet_is_switcher <- as.logical(training_val_frequency$pet_is_switcher == "true")
training_val_frequency$pet_is_switcher
glm_gamma_frequency <- glm(frequency ~., data = training_val_frequency, family = Gamma(link = "log"))
cleaned_combined_data <- na.omit(combined_data)
cleaned_combined_data <- cleaned_combined_data %>%
filter(pet_is_switcher != "", pet_de_sexed_age != "")
training_val_frequency_id <- sample(1:nrow(cleaned_combined_data), 0.7*nrow(cleaned_combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(cleaned_combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "exposure_id"))
training_val_frequency <- cleaned_combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
for (i in 1:nrow(training_val_frequency)) {
if(training_val_frequency$frequency[i] == 0) {
training_val_frequency$frequency[i] <- 0.001
}
}
training_val_frequency$pet_is_switcher <- factor(training_val_frequency$pet_is_switcher)
training_val_frequency$pet_is_switcher <- as.logical(training_val_frequency$pet_is_switcher == "true")
str(training_val_frequency)
levels(training_val_frequency$pet_is_switcher)
length(training_val_frequency$pet_is_switcher)
dim(training_val_frequency$pet_is_switcher)
dim(training_val_frequency)
cleaned_combined_data <- na.omit(combined_data)
training_val_frequency_id <- sample(1:nrow(cleaned_combined_data), 0.7*nrow(cleaned_combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(cleaned_combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "exposure_id", "pet_is_switcher"))
training_val_frequency <- cleaned_combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
for (i in 1:nrow(training_val_frequency)) {
if(training_val_frequency$frequency[i] == 0) {
training_val_frequency$frequency[i] <- 0.001
}
}
str(training_val_frequency)
training_val_frequency$pet_de_sexed <- factor(training_val_frequency$pet_de_sexed)
training_val_frequency$pet_de_sexed <- as.logical(training_val_frequency$pet_de_sexed == "true")
str(training_val_frequency)
glm_gamma_frequency <- glm(frequency ~., data = training_val_frequency, family = Gamma(link = "log"))
glm_gamma_frequency$aic
cleaned_combined_data <- na.omit(combined_data)
training_val_frequency_id <- sample(1:nrow(cleaned_combined_data), 0.7*nrow(cleaned_combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(cleaned_combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "exposure_id", "pet_is_switcher"))
training_val_frequency <- cleaned_combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
for (i in 1:nrow(training_val_frequency)) {
if(training_val_frequency$frequency[i] == 0) {
training_val_frequency$frequency[i] <- 0.001
}
}
training_val_frequency$pet_de_sexed <- factor(training_val_frequency$pet_de_sexed)
training_val_frequency$pet_de_sexed <- as.logical(training_val_frequency$pet_de_sexed == "true")
glm_gamma_frequency <- glm(frequency ~., data = training_val_frequency, family = Gamma(link = "log"))
glm_gamma_frequency$aic
test_frequency <- cleaned_combined_data[-training_val_frequency_id, "frequency"]
test_frequency <- cleaned_combined_data[-training_val_frequency_id, "frequency"]
test_frequency
mean((glm_gamma_frequency$fitted.values-test_frequency)^2)
test_frequency
test_frequency <- as.vector(cleaned_combined_data[-training_val_frequency_id, "frequency"])
test_frequency
mean((glm_gamma_frequency$fitted.values-test_frequency)^2)
glm_gamma_frequency$fitted.values
mean((as.vector(glm_gamma_frequency$fitted.values)-test_frequency)^2)
as.vector(glm_gamma_frequency$fitted.values)
test_frequency
mean((as.vector(glm_gamma_frequency$fitted.values)-test_frequency)^2)
test_frequency <- as.vector(cleaned_combined_data[-training_val_frequency_id, "frequency"])
frequency_model_output <- as.vector(glm_gamma_frequency$fitted.values)
frequency_model_output
mean((frequency_model_output-test_frequency)^2)
test_frequency
frequency_model_output
test_frequency
mean((frequency_model_output-test_frequency)^2)
class(test_frequency)
class(frequency_model_output)
test_frequency <- unlist(test_frequency)
test_frequency_numeric <- as.numeric(test_frequency_numeric)
test_frequency_numeric <- as.numeric(test_frequency)
test_frequency <- unlist(test_frequency)
test_frequency_numeric <- as.numeric(test_frequency)
mean((frequency_model_output-test_frequency)^2)
mean((frequency_model_output-test_frequency)^2, na.rm = TRUE)
test.set <- cleaned_combined_data[-training_val_frequency_id, -which(colnames(cleaned_combined_data) == "frequency")]
test.set
test.set <- cleaned_combined_data[-training_val_frequency_id, -"frequency"]
c(cols.to.remove, which(colnames(cleaned_combined_data) == "frequency"))
cols.to.remove
test.set <- cleaned_combined_data[-training_val_frequency_id, -c(cols.to.remove, which(colnames(cleaned_combined_data) == "frequency"))]
test.set
frequency_glm_prediction <- predict(glm_gamma_frequency, newdata = test.set)
cleaned_combined_data <- na.omit(combined_data)
cleaned_combined_data$pet_de_sexed <- factor(cleaned_combined_data$pet_de_sexed)
cleaned_combined_data$pet_de_sexed <- as.logical(cleaned_combined_data$pet_de_sexed == "true")
training_val_frequency_id <- sample(1:nrow(cleaned_combined_data), 0.7*nrow(cleaned_combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(cleaned_combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "exposure_id", "pet_is_switcher"))
training_val_frequency <- cleaned_combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
for (i in 1:nrow(training_val_frequency)) {
if(training_val_frequency$frequency[i] == 0) {
training_val_frequency$frequency[i] <- 0.001
}
}
test_frequency <- as.vector(cleaned_combined_data[-training_val_frequency_id, "frequency"])
test.set <- cleaned_combined_data[-training_val_frequency_id, -c(cols.to.remove, which(colnames(cleaned_combined_data) == "frequency"))]
glm_gamma_frequency <- glm(frequency ~., data = training_val_frequency, family = Gamma(link = "log"))
frequency_glm_prediction <- predict(glm_gamma_frequency, newdata = test.set)
frequency_glm_prediction
combined_data$frequency
frequency_glm_prediction
class(frequency_glm_prediction)
mean((frequency_glm_prediction-test_frequency)^2, na.rm = TRUE)
class(frequency_glm_prediction)
class(test_frequency)
test_frequency <- unlist(test_frequency)
test_frequency_numeric <- as.numeric(test_frequency)
mean((frequency_glm_prediction-test_frequency)^2, na.rm = TRUE)
glm_gamma_frequency$residuals^2
frequency_squared_residuals$deviance
glm_gamma_frequency$deviance
(frequency_aic <- glm_gamma_frequency$aic)
(frequency_mean_SSE <- mean(glm_gamma_frequency$residuals^2))
(frequency_deviance <- glm_gamma_frequency$deviance)
glm_gamma_frequency$coefficients
frequency_glm_prediction
length(frequency_glm_prediction)
length(test_frequency)
nrow(training_val_frequency)
cleaned_combined_data <- na.omit(combined_data)
cleaned_combined_data$pet_de_sexed <- factor(cleaned_combined_data$pet_de_sexed)
cleaned_combined_data$pet_de_sexed <- as.logical(cleaned_combined_data$pet_de_sexed == "true")
training_val_frequency_id <- sample(1:nrow(cleaned_combined_data), 0.7*nrow(cleaned_combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(cleaned_combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "exposure_id", "pet_is_switcher"))
training_val_frequency <- cleaned_combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
for (i in 1:nrow(training_val_frequency)) {
if(training_val_frequency$frequency[i] == 0) {
training_val_frequency$frequency[i] <- 0.001
}
}
str(training_val_frequency)
view(training_val_frequency)
dim(training_val_frequency)
#Test Frequency
test_frequency <- as.vector(cleaned_combined_data[-training_val_frequency_id, "frequency"])
test.set <- cleaned_combined_data[-training_val_frequency_id, -c(cols.to.remove, which(colnames(cleaned_combined_data) == "frequency"))]
#Frequency GLM
glm_gamma_frequency <- glm(frequency ~., data = training_val_frequency, family = Gamma(link = "log"))
#Frequency GLM fit
(frequency_aic <- glm_gamma_frequency$aic)
(frequency_mean_SSE <- mean(glm_gamma_frequency$residuals^2))
(frequency_deviance <- glm_gamma_frequency$deviance)
glm_gamma_frequency$coefficients
#Frequency GLM test error
frequency_glm_prediction <- predict(glm_gamma_frequency, newdata = test.set)
test_frequency <- unlist(test_frequency)
test_frequency_numeric <- as.numeric(test_frequency)
(test.mse.frequency <- mean((frequency_glm_prediction-test_frequency)^2, na.rm = TRUE))
frequency_glm_prediction <- predict(glm_gamma_frequency, newdata = test.set, type = "response")
(test.mse.frequency <- mean((frequency_glm_prediction-test_frequency)^2, na.rm = TRUE))
length(frequency_glm_prediction)
length(test_frequency)
(test.mse.frequency <- mean((frequency_glm_prediction-test_frequency)^2, na.rm = TRUE))
frequency_glm_prediction
test_frequency
test_frequency <- unlist(test_frequency)
test_frequency_numeric <- as.numeric(test_frequency)
test_frequency
test_frequency <- as.vector(cleaned_combined_data[-training_val_frequency_id, "frequency"])
test_frequency
test_frequency <- unlist(test_frequency)
test_frequency_numeric <- as.numeric(test_frequency)
test_frequency_numeric
(test.mse.frequency <- mean((frequency_glm_prediction-test_frequency_numeric)^2, na.rm = TRUE))
plot(frequency_glm_prediction)
plot(frequency_glm_prediction)
plot(density(combined_data$frequency),
main = "Density Plot with Normal Distribution",
xlab = "Frequency",
ylab = "Density",
col = "blue",
xlim = c(0,1))
mean_val <- mean(combined_data$frequency)
sd_val <- sd(combined_data$frequency)
curve(dnorm(x, mean = mean_val, sd = sd_val),
col = "red",
lwd = 2,
add = TRUE)
legend("topright", legend = c("Data Density", "Normal Distribution"),
col = c("blue", "red"), lwd = 2) ###Heavy Skew, implicates use of gamma distribution for the GLM
glm_ig_frequency <- glm(frequency ~., data = training_val_frequency, family = inverse.gaussian(link = "log"))
glm_ig_frequency_aic <- glm_ig_frequency$aic
glm_gamma_frequency_mean_SSE <- mean(glm_ig_frequency$residuals^2)
glm_ig_frequency_deviance <-glm_ig_frequency$deviance
glm_ig_frequency$coefficients
(glm_ig_frequency_aic <- glm_ig_frequency$aic)
(glm_gamma_frequency_mean_SSE <- mean(glm_ig_frequency$residuals^2))
(glm_ig_frequency_deviance <-glm_ig_frequency$deviance)
glm_ig_frequency_prediction <- predict(glm_ig_frequency, newdata = test.set, type = "response")
(test.mse.frequency_ig <- mean((glm_ig_frequency_prediction-test_frequency_numeric)^2, na.rm = TRUE))
test.mse.frequency_ig
test.mse.frequency_gamma
(test.mse.frequency_gamma <- mean((frequency_glm_prediction_gamma-test_frequency_numeric)^2, na.rm = TRUE))
plot(density(combined_data$frequency),
main = "Density Plot with Normal Distribution",
xlab = "Frequency",
ylab = "Density",
col = "blue",
xlim = c(0,1))
mean_val <- mean(combined_data$frequency)
sd_val <- sd(combined_data$frequency)
curve(dnorm(x, mean = mean_val, sd = sd_val),
col = "red",
lwd = 2,
add = TRUE)
legend("topright", legend = c("Data Density", "Normal Distribution"),
col = c("blue", "red"), lwd = 2) ###Heavy Skew, indicates use of gamma distribution for the GLM
#Training and Validation Set
set.seed(123)
cleaned_combined_data <- na.omit(combined_data)
cleaned_combined_data$pet_de_sexed <- factor(cleaned_combined_data$pet_de_sexed)
cleaned_combined_data$pet_de_sexed <- as.logical(cleaned_combined_data$pet_de_sexed == "true")
training_val_frequency_id <- sample(1:nrow(cleaned_combined_data), 0.7*nrow(cleaned_combined_data)) #Rows of combined data to be used for the training set
cols.to.remove <- which(colnames(cleaned_combined_data) %in% c("severity", "pet_de_sexed_age","nb_suburb", "nb_postcode", "pet_age_years", "nb_breed_name_unique", "nb_breed_name_unique_concat", "exposure_id_1", "exposure_id", "pet_is_switcher"))
training_val_frequency <- cleaned_combined_data[training_val_frequency_id, -cols.to.remove] #training and validation set
for (i in 1:nrow(training_val_frequency)) {
if(training_val_frequency$frequency[i] == 0) {
training_val_frequency$frequency[i] <- 0.001
}
}
str(training_val_frequency)
#Test Frequency
test_frequency <- as.vector(cleaned_combined_data[-training_val_frequency_id, "frequency"])
test.set <- cleaned_combined_data[-training_val_frequency_id, -c(cols.to.remove, which(colnames(cleaned_combined_data) == "frequency"))]
#Frequency GLM Gamma
glm_gamma_frequency <- glm(frequency ~., data = training_val_frequency, family = Gamma(link = "log"))
#Frequency GLM inverse gaussian
glm_ig_frequency <- glm(frequency ~., data = training_val_frequency, family = inverse.gaussian(link = "log"))
###============Gamma Model Fit===================###
#Training Fit
(gamma_frequency_aic <- glm_gamma_frequency$aic)
(gamma_frequency_mean_SSE <- mean(glm_gamma_frequency$residuals^2))
(gamma_frequency_deviance <- glm_gamma_frequency$deviance)
glm_gamma_frequency$coefficients
#Formatting test set
test_frequency <- unlist(test_frequency)
test_frequency_numeric <- as.numeric(test_frequency)
#Test error
frequency_glm_prediction_gamma <- predict(glm_gamma_frequency, newdata = test.set, type = "response")
(test.mse.frequency_gamma <- mean((frequency_glm_prediction_gamma-test_frequency_numeric)^2, na.rm = TRUE))
plot(frequency_glm_prediction_gamma)
###=============Inverse Gaussian Model Fit===============###
##Training Fit
(glm_ig_frequency_aic <- glm_ig_frequency$aic)
(glm_gamma_frequency_mean_SSE <- mean(glm_ig_frequency$residuals^2))
(glm_ig_frequency_deviance <-glm_ig_frequency$deviance)
glm_ig_frequency$coefficients
#Test Error
glm_ig_frequency_prediction <- predict(glm_ig_frequency, newdata = test.set, type = "response")
(test.mse.frequency_ig <- mean((glm_ig_frequency_prediction-test_frequency_numeric)^2, na.rm = TRUE))
test.mse.frequency_ig
test.mse.frequency_gamma
gamma_frequency_aic
