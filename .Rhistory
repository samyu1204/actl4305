UNSW_claims_data %>%
filter(tenure >= 0, claim_paid>0)
#Investigating duplicate claims
n=table(UNSW_claims_data$claim_id)
nrow(n[n!=1])
NumberOfRowsPerClaim =
UNSW_claims_data %>%
group_by(claim_id) %>%
summarise(NumberOfAppearances = n()) %>%
filter(NumberOfAppearances > 1)
VectorOfRepeatedClaims = NumberOfRowsPerClaim$claim_id
length(VectorOfRepeatedClaims)
UNSW_claims_data_ONLY_Repeated_claim_ids = UNSW_claims_data %>%
filter(claim_id %in% VectorOfRepeatedClaims)
UNSW_claims_data = #Removing Duplicate Rows in UNSW Claims Data
UNSW_claims_data %>%
distinct()
Claims_Data_Grouped_By_Claim_ID = #Earned Data with Grouped by Claim ID
UNSW_claims_data %>%
group_by(claim_id)
UNSW_claims_data$claim_start_date = as.Date(UNSW_claims_data$claim_start_date)
UNSW_claims_data$claim_status = as.factor(UNSW_claims_data$claim_status)
UNSW_claims_data$condition_category = as.factor(UNSW_claims_data$condition_category)
#Removing negative tenures and 0 claim_paid
UNSW_claims_data =
UNSW_claims_data %>%
filter(tenure >= 0, claim_paid>0)
#Investigating duplicate claims
n=table(UNSW_claims_data$claim_id)
nrow(n[n!=1])
NumberOfRowsPerClaim =
UNSW_claims_data %>%
group_by(claim_id) %>%
summarise(NumberOfAppearances = n()) %>%
filter(NumberOfAppearances > 1)
VectorOfRepeatedClaims = NumberOfRowsPerClaim$claim_id
length(VectorOfRepeatedClaims)
UNSW_claims_data_ONLY_Repeated_claim_ids = UNSW_claims_data %>%
filter(claim_id %in% VectorOfRepeatedClaims)
Claims_Data_NRC = #Earned Data with No Repeated Claim IDs
UNSW_claims_data %>%
group_by(claim_id)
q=table(UNSW_claims_data$exposure_id)
q=q[q>5]
hist(q)
max(q)
Claim_Volume_Vs_Exposure_ID = #Table of Exposure Ids with their respective claim volumes
UNSW_claims_data %>%
group_by(exposure_id)%>%
summarise(ClaimVolume = n())
##Investigating each variable
summary(UNSW_claims_data)
par(mfrow = c(2, 2))
#Investigating claim_status
ggplot(UNSW_claims_data, aes(x=claim_status)) +
geom_bar(fill="blue", color="black")
#Investigating Claims Cost
ggplot(UNSW_claims_data, aes(x = claim_paid)) +
geom_histogram(binwidth = 50, fill = "blue", color = "black")
#Investigating condition vs claims cost, removing claim_paid=0 as there are 3500 rows where this is the case
p1 <- ggplot(data = filter(UNSW_claims_data,UNSW_claims_data$claim_paid != 0), mapping = aes(x = reorder(condition_category, -claim_paid, FUN = mean), y = claim_paid)) +
geom_boxplot(outlier.shape = NA) +
scale_y_continuous(limits = c(0, 1000)) +
labs(x = "Condition Category (ordered by mean claim paid)", y = "Claim Paid") +
theme_minimal()
p1
#UNSW Earned Data
##Cleaning the data
summary(UNSW_earned_data)
UNSW_earned_data$UW_Date= as.Date(UNSW_earned_data$UW_Date)
UNSW_earned_data$pet_gender = as.factor(UNSW_earned_data$pet_gender)
UNSW_earned_data$pet_de_sexed = as.factor(UNSW_earned_data$pet_de_sexed)
#UNSW_earned_data$pet_de_sexed_age=as.numeric(UNSW_earned_data$pet_de_sexed_age)
UNSW_earned_data$pet_is_switcher= as.factor(UNSW_earned_data$pet_is_switcher)
UNSW_earned_data$nb_policy_first_inception_date = as.Date(UNSW_earned_data$nb_policy_first_inception_date)
UNSW_earned_data$nb_address_type_adj = as.factor(UNSW_earned_data$nb_address_type_adj)
UNSW_earned_data$nb_breed_name_unique = as.factor(UNSW_earned_data$nb_breed_name_unique)
UNSW_earned_data$nb_breed_name_unique_concat = as.factor(UNSW_earned_data$nb_breed_name_unique_concat)
UNSW_earned_data$is_multi_pet_plan = as.factor(UNSW_earned_data$is_multi_pet_plan)
UNSW_earned_data = UNSW_earned_data %>% select(-pet_age_years, -X)
Claims_With_Earned_new <- Claims_With_Earned %>%
select(-exposure_id_1, -exposure_id, -quote_time_group, -quote_date, -lead_date_day, -nb_breed_name_unique_concat, -nb_breed_name_unique, -nb_breed_trait,
-nb_contribution_excess, -nb_postcode, -nb_suburb, -nb_excess, -nb_policy_first_inception_date, -tenure.y, -tenure.x, -total_claim_amount, -claim_id,
-claim_status, -claim_start_date, -UW_Date)
Claims_With_Earned
Claims_With_Earned_new
Claims_With_Earned_new <- Claims_With_Earned %>%
select(-exposure_id_1, -exposure_id, -quote_time_group, -quote_date, -lead_date_day, -nb_breed_name_unique_concat, -nb_breed_name_unique, -nb_breed_trait,
-nb_contribution_excess, -nb_postcode, -nb_suburb, -nb_excess, -nb_policy_first_inception_date, -tenure.y, -tenure.x, -total_claim_amount, -claim_id,
-claim_status, -claim_start_date, -UW_Date)
Claims_With_Earned_new <- Claims_With_Earned %>%
select(-exposure_id_1, -exposure_id, -quote_time_group, -quote_date, -lead_date_day, -nb_breed_name_unique_concat, -nb_breed_name_unique, -nb_breed_trait,
-nb_contribution_excess, -nb_postcode, -nb_suburb, -nb_excess, -nb_policy_first_inception_date, -tenure.y, -tenure.x, -total_claim_amount, -claim_id,
-claim_status, -claim_start_date, -UW_Date)
Claims_With_Earned
colnames(Claims_With_Earned)
Claims_With_Earned_new <- Claims_With_Earned %>%
select(-Claim_start_date, -claim_status, -claim_id, -tenure.x, -exposure_id, -total_claim_amount, -UW_Date,
-tenure.y, -nb_contribution, -nb_excess, nb_postcode, -nb_breed_trait, -nb_breed_name_unique, -nb_breed_name_unique_concat,
-lead_date_day, -quote_date, -quote_time_group, -exposure_id_1, -earned_units)
Claims_With_Earned_new <- Claims_With_Earned %>%
select(-claim_start_date, -claim_status, -claim_id, -tenure.x, -exposure_id, -total_claim_amount, -UW_Date,
-tenure.y, -nb_contribution, -nb_excess, nb_postcode, -nb_breed_trait, -nb_breed_name_unique, -nb_breed_name_unique_concat,
-lead_date_day, -quote_date, -quote_time_group, -exposure_id_1, -earned_units)
colnames(Claims_With_Earned)
Claims_With_Earned_new <- Claims_With_Earned %>%
select(-claim_start_date, -claim_status, -claim_id, -tenure.x, -exposure_id, -total_claim_amount, -UW_Date,
-tenure.y, -nb_contribution, -nb_excess, nb_postcode, -nb_breed_trait, -nb_breed_name_unique, -nb_breed_name_unique_concat,
-lead_date_day, -quote_date, -quote_time_group, -exposure_id_1, -earned_units)
Claims_With_Earned_new <- Claims_With_Earned %>%
select(-`exposure_id_1`, -`exposure_id`, -`quote_time_group`, -`quote_date`, -`lead_date_day`,
-`nb_breed_name_unique_concat`, -`nb_breed_name_unique`, -`nb_breed_trait`,
-`nb_contribution_excess`, -`nb_postcode`, -`nb_suburb`, -`nb_excess`,
-`nb_policy_first_inception_date`, -`tenure.y`, -`tenure.x`, -`total_claim_amount`,
-`claim_id`, -`claim_status`, -`claim_start_date`, -`UW_Date`)
colnames(Claims_With_Earned)
Claims_With_Earned_new <- Claims_With_Earned %>%
select(-claim_start_date, -claim_status, -claim_id, -tenure.x, -exposure_id, -total_claim_amount, -UW_Date,
-tenure.y, -nb_contribution, -nb_excess, -nb_postcode, -nb_breed_trait, -nb_breed_name_unique, -nb_breed_name_unique_concat,
-lead_date_day, -quote_date, -quote_time_group, -exposure_id_1, -earned_units)
colnames(Claims_With_Earned)
Claims_With_Earned_new <- Claims_With_Earned %>%
select(condition_category, claim_paid, pet_de_sexed_age, pet_gender)
Claims_With_Earned
colnames(Claims_With_Earned)
ggplot(simulation, aes(x = Guidelines_Status, y = mean_claim_paid)) +
geom_boxplot() +
labs(title = "Mean Claim Paid by Guidelines Status", x = "Guidelines Status", y = "Mean Claim Paid")
Claims_With_Earned_new <- Claims_With_Earned %>%
select(condition_category, claim_paid, pet_de_sexed_age, pet_gender)
library(dplyr)
library(ggplot2)
library(lubridate)
library(MASS)
library(tidyverse)
library(glmnet)
library(randomForest)
Claims_With_Earned_new <- Claims_With_Earned %>%
select(condition_category, claim_paid, pet_de_sexed_age, pet_gender)
Claims_With_Earned
colnames(Claims_With_Earned)
to.include <- c("condition_category", "claim_paid", "pet_gender", "pet_de_sexed",
"pet_desexed_age", "pet_age_months", "pet_is_switcher", "nb_adress_type_adj", "nb_state", "person_dob",
"owner_age_years", "nb_number_of_breeds", "nb_average_breed_size", "nb_breed_type", "is_multi_pet_plan")
which(colnames(Claims_With_Earned)) %in% to.include
which(colnames(Claims_With_Earned)) == to.include
which(colnames(Claims_With_Earned) == to.include)
colnames(Claims_With_Earned) %in% to.include
which(colnames(Claims_With_Earned) %in% to.include)
Claims_With_Earned_new <- Claims_With_Earned[,which(colnames(Claims_With_Earned) %in% to.include)
Claims_With_Earned_new <- Claims_With_Earned[,which(colnames(Claims_With_Earned) %in% to.include)]
to.include <- c("condition_category", "claim_paid", "pet_gender", "pet_de_sexed",
"pet_desexed_age", "pet_age_months", "pet_is_switcher", "nb_address_type_adj", "nb_state", "person_dob",
"owner_age_years", "nb_number_of_breeds", "nb_average_breed_size", "nb_breed_type", "is_multi_pet_plan")
Claims_With_Earned_new <- Claims_With_Earned[,which(colnames(Claims_With_Earned) %in% to.include)]
Claims_With_Earned_new
Claims_With_Earned_new$pet_gender <- ifelse(Claims_With_Earned_new$pet_gender == "female", 1, 0)
Claims_With_Earned_new$pet_gender <- as.numeric(as.character(Claims_With_Earned_new$pet_gender))
Claims_With_Earned_new$pet_de_sexed <- ifelse(Claims_With_Earned_new$pet_de_sexed == "true", 1, 0)
Claims_With_Earned_new$pet_de_sexed <- as.numeric(as.character(Claims_With_Earned_new$pet_de_sexed))
Claims_With_Earned_new <- Claims_With_Earned_new %>%
mutate(interaction = pet_gender * pet_de_sexed)
Claims_With_Earned_new <- na.omit(Claims_With_Earned_new)
colnames(Claims_With_Earned_new)
X <- Claims_With_Earned_new %>%
select(-claim_paid)
-which(colnames(Claims_With_Earned_new) == "claim_paid")
X <- Claims_With_Earned_new[,-which(colnames(Claims_With_Earned_new) == "claim_paid")]
X <- model.matrix( ~.,data = X)[,-1]
X
Y <- Claims_With_Earned_new$claim_paid[!is.na(Claims_With_Earned_new$claim_paid)]
fit <- cv.glmnet(x= X, y = Y, alpha = 1)
coef(fit)
colnames(Claims_With_Earned_new)
ggplot(Claims_With_Earned_new, aes(x = pet_gender, y = claim_paid, color = as.factor(pet_de_sexed))) +
geom_point() +
geom_smooth(method = "lm", aes(group = pet_de_sexed), se = FALSE) +
labs(title = "Interaction Between Pet Gender and Desexed on Claim Paid")
with.interaction <- lm(claim_paid ~., data = Claims_With_Earned_new)
without.interaction <- lm(claim_paid ~., data = Claims_With_Earned_new[,-which(colnames(Claims_With_Earned_new) == "interaction")])
AIC(with.interaction, without.interaction)
summary(with.interaction) #coefficient estimate of -157.838 significant at 5%
rf.model <- randomForest(claim_paid ~., data = Claims_With_Earned_new, importance = TRUE)
importance_values <- importance(rf.model)[, "%IncMSE"]
barplot(sort(importance_values, decreasing = TRUE),
main = "%IncMSE Variable Importance of the Random Forest Model",
horiz = TRUE,
las = 1,
xlab = "% Increase in MSE", #4th Highest by %increase in MSE
col = "lightblue")
rf.model <- randomForest(claim_paid ~., data = Claims_With_Earned_new, importance = TRUE)
importance_values <- importance(rf.model)[, "%IncMSE"]
barplot(sort(importance_values, decreasing = TRUE),
main = "%IncMSE Variable Importance of the Random Forest Model",
horiz = TRUE,
las = 1,
xlab = "% Increase in MSE", #4th Highest by %increase in MSE
col = "lightblue")
rf.model <- randomForest(claim_paid ~., data = Claims_With_Earned_new, importance = TRUE)
importance_values <- importance(rf.model)[, "%IncMSE"]
barplot(sort(importance_values, decreasing = TRUE),
main = "%IncMSE Variable Importance of the Random Forest Model",
horiz = TRUE,
las = 1,
xlab = "% Increase in MSE", #4th Highest by %increase in MSE
col = "lightblue")
colnames(Claims_With_Earned)
to.include <- c("condition_category", "claim_paid", "pet_gender", "pet_de_sexed",
"pet_de_sexed_age", "pet_age_months", "pet_is_switcher", "nb_address_type_adj", "nb_state", "person_dob",
"owner_age_years", "nb_number_of_breeds", "nb_average_breed_size", "nb_breed_type", "is_multi_pet_plan")
Claims_With_Earned_new <- Claims_With_Earned[,which(colnames(Claims_With_Earned) %in% to.include)]
Claims_With_Earned_new$pet_gender <- ifelse(Claims_With_Earned_new$pet_gender == "female", 1, 0)
Claims_With_Earned_new$pet_gender <- as.numeric(as.character(Claims_With_Earned_new$pet_gender))
Claims_With_Earned_new$pet_de_sexed <- ifelse(Claims_With_Earned_new$pet_de_sexed == "true", 1, 0)
Claims_With_Earned_new$pet_de_sexed <- as.numeric(as.character(Claims_With_Earned_new$pet_de_sexed))
Claims_With_Earned_new <- Claims_With_Earned_new %>%
mutate(interaction = pet_gender * pet_de_sexed)
Claims_With_Earned_new <- na.omit(Claims_With_Earned_new)
colnames(Claims_With_Earned_new)
X <- Claims_With_Earned_new[,-which(colnames(Claims_With_Earned_new) == "claim_paid")]
X <- model.matrix( ~.,data = X)[,-1]
Y <- Claims_With_Earned_new$claim_paid[!is.na(Claims_With_Earned_new$claim_paid)]
fit <- cv.glmnet(x= X, y = Y, alpha = 1)
coef(fit)
colnames(Claims_With_Earned_new)
ggplot(Claims_With_Earned_new, aes(x = pet_gender, y = claim_paid, color = as.factor(pet_de_sexed))) +
geom_point() +
geom_smooth(method = "lm", aes(group = pet_de_sexed), se = FALSE) +
labs(title = "Interaction Between Pet Gender and Desexed on Claim Paid")
with.interaction <- lm(claim_paid ~., data = Claims_With_Earned_new)
without.interaction <- lm(claim_paid ~., data = Claims_With_Earned_new[,-which(colnames(Claims_With_Earned_new) == "interaction")])
AIC(with.interaction, without.interaction)
summary(with.interaction) #coefficient estimate of -157.838 significant at 5%
rf.model <- randomForest(claim_paid ~., data = Claims_With_Earned_new, importance = TRUE)
importance_values <- importance(rf.model)[, "%IncMSE"]
barplot(sort(importance_values, decreasing = TRUE),
main = "%IncMSE Variable Importance of the Random Forest Model",
horiz = TRUE,
las = 1,
xlab = "% Increase in MSE", #4th Highest by %increase in MSE
col = "lightblue")
to.include <- c("condition_category", "claim_paid", "pet_gender", "pet_de_sexed",
"pet_de_sexed_age", "pet_age_months", "pet_is_switcher", "nb_address_type_adj", "nb_state", "person_dob",
"owner_age_years", "nb_number_of_breeds", "nb_average_breed_size", "nb_breed_type", "is_multi_pet_plan")
# Subset columns
Claims_With_Earned_new <- Claims_With_Earned[, which(colnames(Claims_With_Earned) %in% to.include)]
# Binary conversion for pet_gender and pet_de_sexed
Claims_With_Earned_new$pet_gender <- ifelse(Claims_With_Earned_new$pet_gender == "female", 1, 0)
Claims_With_Earned_new$pet_gender <- as.numeric(Claims_With_Earned_new$pet_gender)
Claims_With_Earned_new$pet_de_sexed <- ifelse(Claims_With_Earned_new$pet_de_sexed == "true", 1, 0)
Claims_With_Earned_new$pet_de_sexed <- as.numeric(Claims_With_Earned_new$pet_de_sexed)
# Create interaction term
Claims_With_Earned_new <- Claims_With_Earned_new %>%
mutate(interaction = pet_gender * pet_de_sexed)
# Omit missing values
Claims_With_Earned_new <- na.omit(Claims_With_Earned_new)
# Separate features and target variable for model matrix
X <- Claims_With_Earned_new[, -which(colnames(Claims_With_Earned_new) == "claim_paid")]
X <- model.matrix(~., data = X)[,-1] # Model matrix excluding the intercept
Y <- Claims_With_Earned_new$claim_paid[!is.na(Claims_With_Earned_new$claim_paid)]
# Fit Lasso model using glmnet
fit <- cv.glmnet(x = X, y = Y, alpha = 1)
# Coefficients of the fit model
print(coef(fit))
# Plot interaction using ggplot
ggplot(Claims_With_Earned_new, aes(x = pet_gender, y = claim_paid, color = as.factor(pet_de_sexed))) +
geom_point() +
geom_smooth(method = "lm", aes(group = pet_de_sexed), se = FALSE) +
labs(title = "Interaction Between Pet Gender and Desexed Status on Claim Paid")
# Fit linear models with and without interaction
with.interaction <- lm(claim_paid ~ ., data = Claims_With_Earned_new)
without.interaction <- lm(claim_paid ~ ., data = Claims_With_Earned_new[, -which(colnames(Claims_With_Earned_new) == "interaction")])
# Compare models using AIC
AIC(with.interaction, without.interaction)
# Summary of the model with interaction
summary(with.interaction)
# Random forest model
rf.model <- randomForest(claim_paid ~ ., data = Claims_With_Earned_new, importance = TRUE)
# Extract and plot feature importance
importance_values <- importance(rf.model)[, "%IncMSE"]
barplot(sort(importance_values, decreasing = TRUE),
main = "%IncMSE Variable Importance of the Random Forest Model",
horiz = TRUE,
las = 1,
xlab = "% Increase in MSE",
col = "lightblue")
par(mfrow = c(1,1))
to.include <- c("condition_category", "claim_paid", "pet_gender", "pet_de_sexed",
"pet_de_sexed_age", "pet_age_months", "pet_is_switcher", "nb_address_type_adj", "nb_state", "person_dob",
"owner_age_years", "nb_number_of_breeds", "nb_average_breed_size", "nb_breed_type", "is_multi_pet_plan")
# Subset columns
Claims_With_Earned_new <- Claims_With_Earned[, which(colnames(Claims_With_Earned) %in% to.include)]
# Binary conversion for pet_gender and pet_de_sexed
Claims_With_Earned_new$pet_gender <- ifelse(Claims_With_Earned_new$pet_gender == "female", 1, 0)
Claims_With_Earned_new$pet_gender <- as.numeric(Claims_With_Earned_new$pet_gender)
Claims_With_Earned_new$pet_de_sexed <- ifelse(Claims_With_Earned_new$pet_de_sexed == "true", 1, 0)
Claims_With_Earned_new$pet_de_sexed <- as.numeric(Claims_With_Earned_new$pet_de_sexed)
# Create interaction term
Claims_With_Earned_new <- Claims_With_Earned_new %>%
mutate(interaction = pet_gender * pet_de_sexed)
# Omit missing values
Claims_With_Earned_new <- na.omit(Claims_With_Earned_new)
# Separate features and target variable for model matrix
X <- Claims_With_Earned_new[, -which(colnames(Claims_With_Earned_new) == "claim_paid")]
X <- model.matrix(~., data = X)[,-1] # Model matrix excluding the intercept
Y <- Claims_With_Earned_new$claim_paid[!is.na(Claims_With_Earned_new$claim_paid)]
# Fit Lasso model using glmnet
fit <- cv.glmnet(x = X, y = Y, alpha = 1)
# Coefficients of the fit model
print(coef(fit))
# Plot interaction using ggplot
ggplot(Claims_With_Earned_new, aes(x = pet_gender, y = claim_paid, color = as.factor(pet_de_sexed))) +
geom_point() +
geom_smooth(method = "lm", aes(group = pet_de_sexed), se = FALSE) +
labs(title = "Interaction Between Pet Gender and Desexed Status on Claim Paid")
# Fit linear models with and without interaction
with.interaction <- lm(claim_paid ~ ., data = Claims_With_Earned_new)
without.interaction <- lm(claim_paid ~ ., data = Claims_With_Earned_new[, -which(colnames(Claims_With_Earned_new) == "interaction")])
# Compare models using AIC
AIC(with.interaction, without.interaction)
# Summary of the model with interaction
summary(with.interaction)
# Random forest model
rf.model <- randomForest(claim_paid ~ ., data = Claims_With_Earned_new, importance = TRUE)
# Extract and plot feature importance
importance_values <- importance(rf.model)[, "%IncMSE"]
barplot(sort(importance_values, decreasing = TRUE),
main = "%IncMSE Variable Importance of the Random Forest Model",
horiz = TRUE,
las = 1,
xlab = "% Increase in MSE",
col = "lightblue")
to.include <- c("condition_category", "claim_paid", "pet_gender", "pet_de_sexed",
"pet_de_sexed_age", "pet_age_months", "pet_is_switcher", "nb_address_type_adj", "nb_state", "person_dob",
"owner_age_years", "nb_number_of_breeds", "nb_average_breed_size", "nb_breed_type", "is_multi_pet_plan")
# Subset columns
Claims_With_Earned_new <- Claims_With_Earned[, which(colnames(Claims_With_Earned) %in% to.include)]
# Binary conversion for pet_gender and pet_de_sexed
Claims_With_Earned_new$pet_gender <- ifelse(Claims_With_Earned_new$pet_gender == "female", 1, 0)
Claims_With_Earned_new$pet_gender <- as.numeric(Claims_With_Earned_new$pet_gender)
Claims_With_Earned_new$pet_de_sexed <- ifelse(Claims_With_Earned_new$pet_de_sexed == "true", 1, 0)
Claims_With_Earned_new$pet_de_sexed <- as.numeric(Claims_With_Earned_new$pet_de_sexed)
# Create interaction term
Claims_With_Earned_new <- Claims_With_Earned_new %>%
mutate(interaction = pet_gender * pet_de_sexed)
# Omit missing values
Claims_With_Earned_new <- na.omit(Claims_With_Earned_new)
# Separate features and target variable for model matrix
X <- Claims_With_Earned_new[, -which(colnames(Claims_With_Earned_new) == "claim_paid")]
X <- model.matrix(~., data = X)[,-1] # Model matrix excluding the intercept
Y <- Claims_With_Earned_new$claim_paid[!is.na(Claims_With_Earned_new$claim_paid)]
# Fit Lasso model using glmnet
fit <- cv.glmnet(x = X, y = Y, alpha = 1)
# Coefficients of the fit model
print(coef(fit))
# Plot interaction using ggplot
ggplot(Claims_With_Earned_new, aes(x = pet_gender, y = claim_paid, color = as.factor(pet_de_sexed))) +
geom_point() +
geom_smooth(method = "lm", aes(group = pet_de_sexed), se = FALSE) +
labs(title = "Interaction Between Pet Gender and Desexed Status on Claim Paid")
# Fit linear models with and without interaction
with.interaction <- lm(claim_paid ~ ., data = Claims_With_Earned_new)
without.interaction <- lm(claim_paid ~ ., data = Claims_With_Earned_new[, -which(colnames(Claims_With_Earned_new) == "interaction")])
# Compare models using AIC
AIC(with.interaction, without.interaction)
# Summary of the model with interaction
summary(with.interaction)
# Random forest model
rf.model <- randomForest(claim_paid ~ ., data = Claims_With_Earned_new, importance = TRUE)
# Extract and plot feature importance
importance_values <- importance(rf.model)[, "%IncMSE"]
barplot(sort(importance_values, decreasing = TRUE),
main = "%IncMSE Variable Importance of the Random Forest Model",
horiz = TRUE,
las = 1,
xlab = "% Increase in MSE",
col = "lightblue")
to.include <- c("condition_category", "claim_paid", "pet_gender", "pet_de_sexed",
"pet_de_sexed_age", "pet_age_months", "pet_is_switcher", "nb_address_type_adj", "nb_state", "person_dob",
"owner_age_years", "nb_number_of_breeds", "nb_average_breed_size", "nb_breed_type", "is_multi_pet_plan")
# Subset columns
Claims_With_Earned_new <- Claims_With_Earned[, which(colnames(Claims_With_Earned) %in% to.include)]
# Binary conversion for pet_gender and pet_de_sexed
Claims_With_Earned_new$pet_gender <- ifelse(Claims_With_Earned_new$pet_gender == "female", 1, 0)
Claims_With_Earned_new$pet_gender <- as.numeric(Claims_With_Earned_new$pet_gender)
Claims_With_Earned_new$pet_de_sexed <- ifelse(Claims_With_Earned_new$pet_de_sexed == "true", 1, 0)
Claims_With_Earned_new$pet_de_sexed <- as.numeric(Claims_With_Earned_new$pet_de_sexed)
# Create interaction term
Claims_With_Earned_new <- Claims_With_Earned_new %>%
mutate(interaction = pet_gender * pet_de_sexed)
# Omit missing values
Claims_With_Earned_new <- na.omit(Claims_With_Earned_new)
# Separate features and target variable for model matrix
X <- Claims_With_Earned_new[, -which(colnames(Claims_With_Earned_new) == "claim_paid")]
X <- model.matrix(~., data = X)[,-1] # Model matrix excluding the intercept
Y <- Claims_With_Earned_new$claim_paid[!is.na(Claims_With_Earned_new$claim_paid)]
# Fit Lasso model using glmnet
fit <- cv.glmnet(x = X, y = Y, alpha = 1)
# Coefficients of the fit model
print(coef(fit))
# Plot interaction using ggplot
ggplot(Claims_With_Earned_new, aes(x = pet_gender, y = claim_paid, color = as.factor(pet_de_sexed))) +
geom_point() +
geom_smooth(method = "lm", aes(group = pet_de_sexed), se = FALSE) +
labs(title = "Interaction Between Pet Gender and Desexed Status on Claim Paid")
# Fit linear models with and without interaction
with.interaction <- lm(claim_paid ~ ., data = Claims_With_Earned_new)
without.interaction <- lm(claim_paid ~ ., data = Claims_With_Earned_new[, -which(colnames(Claims_With_Earned_new) == "interaction")])
# Compare models using AIC
AIC(with.interaction, without.interaction)
# Summary of the model with interaction
summary(with.interaction)
# Random forest model
rf.model <- randomForest(claim_paid ~ ., data = Claims_With_Earned_new, importance = TRUE)
# Extract and plot feature importance
importance_values <- importance(rf.model)[, "%IncMSE"]
barplot(sort(importance_values, decreasing = TRUE),
main = "%IncMSE Variable Importance of the Random Forest Model",
horiz = TRUE,
las = 1,
xlab = "% Increase in MSE",
col = "lightblue")
to.include <- c("condition_category", "claim_paid", "pet_gender", "pet_de_sexed",
"pet_de_sexed_age", "pet_age_months", "pet_is_switcher", "nb_address_type_adj", "nb_state", "person_dob",
"owner_age_years", "nb_number_of_breeds", "nb_average_breed_size", "nb_breed_type", "is_multi_pet_plan")
# Subset columns
Claims_With_Earned_new <- Claims_With_Earned[, which(colnames(Claims_With_Earned) %in% to.include)]
# Binary conversion for pet_gender and pet_de_sexed
Claims_With_Earned_new$pet_gender <- ifelse(Claims_With_Earned_new$pet_gender == "female", 1, 0)
Claims_With_Earned_new$pet_gender <- as.numeric(Claims_With_Earned_new$pet_gender)
Claims_With_Earned_new$pet_de_sexed <- ifelse(Claims_With_Earned_new$pet_de_sexed == "true", 1, 0)
Claims_With_Earned_new$pet_de_sexed <- as.numeric(Claims_With_Earned_new$pet_de_sexed)
# Create interaction term
Claims_With_Earned_new <- Claims_With_Earned_new %>%
mutate(interaction = pet_gender * pet_de_sexed)
# Omit missing values
Claims_With_Earned_new <- na.omit(Claims_With_Earned_new)
# Separate features and target variable for model matrix
X <- Claims_With_Earned_new[, -which(colnames(Claims_With_Earned_new) == "claim_paid")]
X <- model.matrix(~., data = X)[,-1] # Model matrix excluding the intercept
Y <- Claims_With_Earned_new$claim_paid[!is.na(Claims_With_Earned_new$claim_paid)]
# Fit Lasso model using glmnet
fit <- cv.glmnet(x = X, y = Y, alpha = 1)
# Coefficients of the fit model
print(coef(fit))
# Plot interaction using ggplot
ggplot(Claims_With_Earned_new, aes(x = pet_gender, y = claim_paid, color = as.factor(pet_de_sexed))) +
geom_point() +
geom_smooth(method = "lm", aes(group = pet_de_sexed), se = FALSE) +
labs(title = "Interaction Between Pet Gender and Desexed Status on Claim Paid")
# Fit linear models with and without interaction
with.interaction <- lm(claim_paid ~ ., data = Claims_With_Earned_new)
without.interaction <- lm(claim_paid ~ ., data = Claims_With_Earned_new[, -which(colnames(Claims_With_Earned_new) == "interaction")])
# Compare models using AIC
AIC(with.interaction, without.interaction)
# Summary of the model with interaction
summary(with.interaction)
# Random forest model
rf.model <- randomForest(claim_paid ~ ., data = Claims_With_Earned_new, importance = TRUE)
# Extract and plot feature importance
importance_values <- importance(rf.model)[, "%IncMSE"]
barplot(sort(importance_values, decreasing = TRUE),
main = "%IncMSE Variable Importance of the Random Forest Model",
horiz = TRUE,
las = 1,
xlab = "% Increase in MSE",
col = "lightblue")
ggplot(Claims_With_Earned_new_clean, aes(x = pet_gender, y = claim_paid, color = as.factor(pet_de_sexed))) +
geom_point() +
geom_smooth(method = "lm", aes(group = pet_de_sexed), se = FALSE) +
labs(title = "Interaction Between Pet Gender and Desexed on Claim Paid") +
theme(
plot.margin = unit(c(1, 1, 1, 2), "cm"),  # Adjust margins (top, right, bottom, left)
axis.text.y = element_text(margin = margin(r = 10))  # Adds space between labels and plot
)
ggplot(Claims_With_Earned_new, aes(x = pet_gender, y = claim_paid, color = as.factor(pet_de_sexed))) +
geom_point() +
geom_smooth(method = "lm", aes(group = pet_de_sexed), se = FALSE) +
labs(title = "Interaction Between Pet Gender and Desexed on Claim Paid") +
theme(
plot.margin = unit(c(1, 1, 1, 2), "cm"),  # Adjust margins (top, right, bottom, left)
axis.text.y = element_text(margin = margin(r = 10))  # Adds space between labels and plot
)
ggplot(Claims_With_Earned_new_clean, aes(x = pet_gender, y = claim_paid, color = as.factor(pet_de_sexed))) +
geom_point() +
geom_smooth(method = "lm", aes(group = pet_de_sexed), se = FALSE) +
labs(title = "Interaction Between Pet Gender and Desexed on Claim Paid") +
theme(
plot.margin = margin(t = 10, r = 10, b = 10, l = 30),  # Adjust margins (top, right, bottom, left)
axis.text.y = element_text(margin = margin(r = 10))  # Adds space between y-axis text and plot
)
ggplot(Claims_With_Earned_new, aes(x = pet_gender, y = claim_paid, color = as.factor(pet_de_sexed))) +
geom_point() +
geom_smooth(method = "lm", aes(group = pet_de_sexed), se = FALSE) +
labs(title = "Interaction Between Pet Gender and Desexed on Claim Paid") +
theme(
plot.margin = margin(t = 10, r = 10, b = 10, l = 30),  # Adjust margins (top, right, bottom, left)
axis.text.y = element_text(margin = margin(r = 10))  # Adds space between y-axis text and plot
)
par(mar = c(5,10,4,2))
barplot(sort(importance_values, decreasing = TRUE),
main = "%IncMSE Variable Importance of the Random Forest Model",
horiz = TRUE,
las = 1,
xlab = "% Increase in MSE",
col = "lightblue")
print(coef(fit, s = "lambda.min"))
X
ggplot(Claims_With_Earned_new, aes(x = pet_gender, y = claim_paid, color = as.factor(pet_de_sexed))) +
geom_point() +
geom_smooth(method = "lm", aes(group = pet_de_sexed), se = FALSE) +
labs(title = "Interaction Between Pet Gender and Desexed Status on Claim Paid")
