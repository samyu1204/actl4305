library(dplyr)
library(ggplot2)
library(lubridate)
setwd("/Users/Alex/Documents/2022/UNSW/ACTL4305/Assignment")
UNSW_claims_data = read.csv("UNSW_claims_data.csv", header=TRUE )
UNSW_earned_data = read.csv("UNSW_earned_data_adjusted_Sep27.csv", header=TRUE)
UNSW_claims_data
UNSW_claims_data =
UNSW_claims_data %>%
filter(tenure >= 0, claim_paid>0)
UNSW_claims_data
n=table(UNSW_claims_data$claim_id)
nrow(n[n!=1])
NumberOfRowsPerClaim =
UNSW_claims_data %>%
group_by(claim_id) %>%
summarise(NumberOfAppearances = n()) %>%
filter(NumberOfAppearances > 1)
VectorOfRepeatedClaims = NumberOfRowsPerClaim$claim_id
length(VectorOfRepeatedClaims)
UNSW_claims_data_ONLY_Repeated_claim_ids = UNSW_claims_data %>%
filter(claim_id %in% VectorOfRepeatedClaims)
Claims_Data_Grouped_By_Claim_ID = #Earned Data with Grouped by Claim ID
UNSW_claims_data %>%
group_by(claim_id)
Claims_Data_Grouped_By_Claim_ID
Claims_Data_Grouped_By_Claim_ID = #Earned Data with Grouped by Claim ID
UNSW_claims_data %>%
group_by(claim_id)
##Investigating each variable
summary(UNSW_claims_data)
par(mfrow = c(2, 2))
#Investigating claim_status
ggplot(UNSW_claims_data, aes(x=claim_status)) +
geom_bar(fill="blue", color="black")
#Investigating Claims Cost
ggplot(UNSW_claims_data, aes(x = claim_paid)) +
geom_histogram(binwidth = 50, fill = "blue", color = "black")
#Investigating condition vs claims cost, removing claim_paid=0 as there are 3500 rows where this is the case
p1 <- ggplot(data = filter(UNSW_claims_data,UNSW_claims_data$claim_paid != 0), mapping = aes(x = reorder(condition_category, -claim_paid, FUN = mean), y = claim_paid)) +
geom_boxplot(outlier.shape = NA) +
scale_y_continuous(limits = c(0, 1000)) +
labs(x = "Condition Category (ordered by median hwy)", y = "Claim Paid") +
theme_minimal()
p1
#UNSW Earned Data
##Cleaning the data
summary(UNSW_earned_data)
UNSW_earned_data$UW_Date= as.Date(UNSW_earned_data$UW_Date)
UNSW_earned_data$pet_gender = as.factor(UNSW_earned_data$pet_gender)
UNSW_earned_data$pet_de_sexed = as.factor(UNSW_earned_data$pet_de_sexed)
#UNSW_earned_data$pet_de_sexed_age=as.numeric(UNSW_earned_data$pet_de_sexed_age)
UNSW_earned_data$pet_is_switcher= as.factor(UNSW_earned_data$pet_is_switcher)
UNSW_earned_data$nb_policy_first_inception_date = as.Date(UNSW_earned_data$nb_policy_first_inception_date)
UNSW_earned_data$nb_address_type_adj = as.factor(UNSW_earned_data$nb_address_type_adj)
UNSW_earned_data$nb_breed_name_unique = as.factor(UNSW_earned_data$nb_breed_name_unique)
UNSW_earned_data$nb_breed_name_unique_concat = as.factor(UNSW_earned_data$nb_breed_name_unique_concat)
UNSW_earned_data$is_multi_pet_plan = as.factor(UNSW_earned_data$is_multi_pet_plan)
UNSW_earned_data = UNSW_earned_data %>% select(-pet_age_years, -X)
UNSW_earned_data$nb_state = as.factor(UNSW_earned_data$nb_state)
UNSW_earned_data$person_dob = as.Date(UNSW_earned_data$person_dob)
UNSW_earned_data$nb_breed_type = as.factor(UNSW_earned_data$nb_breed_type)
UNSW_earned_data$nb_breed_trait = as.factor(UNSW_earned_data$nb_breed_trait)
UNSW_earned_data$lead_date_day = as.Date(UNSW_earned_data$lead_date_day)
UNSW_earned_data$quote_date= as.Date(UNSW_earned_data$quote_date)
UNSW_earned_data$quote_time_group= as.factor(UNSW_earned_data$quote_time_group)
UNSW_earned_data$nb_postcode= as.factor(UNSW_earned_data$nb_postcode)
###Removing useless row number column
UNSW_earned_data =
UNSW_earned_data %>%
select(-row_num)
###Multiple exposure ids appear in both datasets
table(UNSW_earned_data$exposure_id)
table(UNSW_claims_data$exposure_id)
#Ensuring that each row in UNSW_earned_data contains a unique exposure_id
Earned_Data_NRE = #Earned Data with No Repeated Exposure IDs
UNSW_earned_data %>%
group_by(exposure_id) %>%
filter(tenure == max(tenure)) %>%
ungroup()
t= table(Earned_Data_NRE$exposure_id)
t[t==1]
t[t!=1]
NumberOfRowsPerExposure =
UNSW_earned_data %>%
group_by(exposure_id) %>%
summarise(NumberOfAppearances = n()) %>%
filter(NumberOfAppearances > 1)
VectorOfRepeatedExposures = NumberOfRowsPerExposure$exposure_id
VectorOfRepeatedExposures
Claims_With_Earned <- left_join(UNSW_claims_data, Earned_Data_NRE, by = "exposure_id")
table(Claims_With_Earned$tenure.y>Claims_With_Earned$tenure.x)
m=table(Claims_With_Earned$claim_id)
m[m!=1]
##Investigating Variables
#Plotting Claims costs by Pet Age split by dog breed / condition type
p1
Claims_With_Earned
view(Claims_With_Earned)
glimpse(Claims_With_Earned)
UNSW_claims_data
UNSW_earned_data
UNSW_claims_data_ONLY_Repeated_claim_ids
glimpse(Claims_With_Earned)
write.csv(Claims_With_Earned, file = "claims_with_earned.csv")
m
m[m!=1]
glimpse(Claims_With_Earned)
colnames(Claims_With_Earned)
glimpse(Claims_With_Earned)
view(Claims_With_Earned)
Claims_With_Earned
Claims_With_Earned
view(Claims_With_Earned)
Claims_With_Earned
str(Claims_With_Earned)
Claims_With_Earned
glimpse(Claims_With_Earned)
Claims_With_Earned
glimpse(Claims_With_Earned)
corr.matrix <- cor(total_claim_amount %>%
select_if(is.numeric))
corr.matrix <- Claims_With_Earned %>%
cor(total_claim_amount %>%
select_if(is.numeric))
Claims_With_Earned
corr.matrix <- Claims_With_Earned %>%
select_if(is.numeric) %>%
cor()
corr.matrix
library(dplyr)
library(ggplot2)
library(lubridate)
setwd("/Users/Alex/Documents/2022/UNSW/ACTL4305/Assignment")
library(dplyr)
library(ggplot2)
library(lubridate)
UNSW_claims_data = read.csv("UNSW_claims_data.csv", header=TRUE )
UNSW_earned_data = read.csv("UNSW_earned_data_adjusted_Sep27.csv", header=TRUE)
#UNSW claims data
##Cleaning the data
UNSW_claims_data$claim_start_date = as.Date(UNSW_claims_data$claim_start_date)
UNSW_claims_data$claim_status = as.factor(UNSW_claims_data$claim_status)
UNSW_claims_data$condition_category = as.factor(UNSW_claims_data$condition_category)
#Removing negative tenures and 0 claim_paid
UNSW_claims_data =
UNSW_claims_data %>%
filter(tenure >= 0, claim_paid>0)
#Investigating duplicate claims
n=table(UNSW_claims_data$claim_id)
nrow(n[n!=1])
NumberOfRowsPerClaim =
UNSW_claims_data %>%
group_by(claim_id) %>%
summarise(NumberOfAppearances = n()) %>%
filter(NumberOfAppearances > 1)
VectorOfRepeatedClaims = NumberOfRowsPerClaim$claim_id
length(VectorOfRepeatedClaims)
UNSW_claims_data_ONLY_Repeated_claim_ids = UNSW_claims_data %>%
filter(claim_id %in% VectorOfRepeatedClaims)
Claims_Data_Grouped_By_Claim_ID = #Earned Data with Grouped by Claim ID
UNSW_claims_data %>%
group_by(claim_id)
##Investigating each variable
summary(UNSW_claims_data)
par(mfrow = c(2, 2))
#Investigating claim_status
ggplot(UNSW_claims_data, aes(x=claim_status)) +
geom_bar(fill="blue", color="black")
#Investigating Claims Cost
ggplot(UNSW_claims_data, aes(x = claim_paid)) +
geom_histogram(binwidth = 50, fill = "blue", color = "black")
#Investigating condition vs claims cost, removing claim_paid=0 as there are 3500 rows where this is the case
p1 <- ggplot(data = filter(UNSW_claims_data,UNSW_claims_data$claim_paid != 0), mapping = aes(x = reorder(condition_category, -claim_paid, FUN = mean), y = claim_paid)) +
geom_boxplot(outlier.shape = NA) +
scale_y_continuous(limits = c(0, 1000)) +
labs(x = "Condition Category (ordered by median hwy)", y = "Claim Paid") +
theme_minimal()
p1
#UNSW Earned Data
##Cleaning the data
summary(UNSW_earned_data)
UNSW_earned_data$UW_Date= as.Date(UNSW_earned_data$UW_Date)
UNSW_earned_data$pet_gender = as.factor(UNSW_earned_data$pet_gender)
UNSW_earned_data$pet_de_sexed = as.factor(UNSW_earned_data$pet_de_sexed)
#UNSW_earned_data$pet_de_sexed_age=as.numeric(UNSW_earned_data$pet_de_sexed_age)
UNSW_earned_data$pet_is_switcher= as.factor(UNSW_earned_data$pet_is_switcher)
UNSW_earned_data$nb_policy_first_inception_date = as.Date(UNSW_earned_data$nb_policy_first_inception_date)
UNSW_earned_data$nb_address_type_adj = as.factor(UNSW_earned_data$nb_address_type_adj)
UNSW_earned_data$nb_breed_name_unique = as.factor(UNSW_earned_data$nb_breed_name_unique)
UNSW_earned_data$nb_breed_name_unique_concat = as.factor(UNSW_earned_data$nb_breed_name_unique_concat)
UNSW_earned_data$is_multi_pet_plan = as.factor(UNSW_earned_data$is_multi_pet_plan)
UNSW_earned_data = UNSW_earned_data %>% select(-pet_age_years, -X)
UNSW_earned_data$nb_state = as.factor(UNSW_earned_data$nb_state)
UNSW_earned_data$person_dob = as.Date(UNSW_earned_data$person_dob)
UNSW_earned_data$nb_breed_type = as.factor(UNSW_earned_data$nb_breed_type)
UNSW_earned_data$nb_breed_trait = as.factor(UNSW_earned_data$nb_breed_trait)
UNSW_earned_data$lead_date_day = as.Date(UNSW_earned_data$lead_date_day)
UNSW_earned_data$quote_date= as.Date(UNSW_earned_data$quote_date)
UNSW_earned_data$quote_time_group= as.factor(UNSW_earned_data$quote_time_group)
UNSW_earned_data$nb_postcode= as.factor(UNSW_earned_data$nb_postcode)
###Removing useless row number column
UNSW_earned_data =
UNSW_earned_data %>%
select(-row_num)
###Multiple exposure ids appear in both datasets
table(UNSW_earned_data$exposure_id)
table(UNSW_claims_data$exposure_id)
#Ensuring that each row in UNSW_earned_data contains a unique exposure_id
Earned_Data_NRE = #Earned Data with No Repeated Exposure IDs
UNSW_earned_data %>%
group_by(exposure_id) %>%
filter(tenure == max(tenure)) %>%
ungroup()
t= table(Earned_Data_NRE$exposure_id)
t[t==1]
t[t!=1]
NumberOfRowsPerExposure =
UNSW_earned_data %>%
group_by(exposure_id) %>%
summarise(NumberOfAppearances = n()) %>%
filter(NumberOfAppearances > 1)
VectorOfRepeatedExposures = NumberOfRowsPerExposure$exposure_id
VectorOfRepeatedExposures
Claims_With_Earned <- left_join(UNSW_claims_data, Earned_Data_NRE, by = "exposure_id")
table(Claims_With_Earned$tenure.y>Claims_With_Earned$tenure.x)
m=table(Claims_With_Earned$claim_id)
m[m!=1]
##Investigating Variables
#Plotting Claims costs by Pet Age split by dog breed / condition type
corr.matrix <- Claims_With_Earned %>%
select_if(is.numeric) %>%
cor()
glimpse()
corr.matrix
view(corr.matrix)
install.packages(corrplot)
install.packages("corrplot")
library("corrplot")
corrplot(corr.matrix, method = "color", type = "upper",
t1.col = "black", tl.srt = 45,
addCoef.col = "black")
corr.matrix <- Claims_With_Earned %>%
select_if(is.numeric) %>%
cor() %>%
select(total_claim_amount, claim_paid)
inf.claims <- c("total_claim_amount", "claim_paid")
inf.claims <- c("total_claim_amount", "claim_paid")
corr.matrix[inf.claims, ]
corr.subset <- corr.matrix[inf.claims, ]
corrplot(corr.subset, method = "color", type = "upper",
t1.col = "black", tl.srt = 45,
addCoef.col = "black")
par(mfrom = c(1,1))
par(mfrow = c(1,1))
corrplot(corr.subset, method = "color", type = "upper",
t1.col = "black", tl.srt = 45,
addCoef.col = "black")
install.packages("corrplot")
library("corrplot")
corrplot(corr.subset, method = "color", type = "upper",
t1.col = "black", tl.srt = 45,
addCoef.col = "black")
glimpse(Claims_With_Earned)
library(dplyr)
library(ggplot2)
library(lubridate)
glimpse(Claims_With_Earned)
claims.rf <- randomForest(total_claim_amount ~., data = Claims_With_Earned, imporance = TRUE)
library(randomForest)
claims.rf <- randomForest(total_claim_amount ~., data = Claims_With_Earned, imporance = TRUE)
claims.rf
claims.rf <- randomForest(total_claim_amount ~., data = Claims_With_Earned, imporance = TRUE)
Claims_With_Earned
Claims_With_Earned
no.missing.claims.with.earned <- Claims_With_Earned %>%
drop_na
no.missing.claims.with.earned <- Claims_With_Earned %>%
drop_na()
Claims_With_Earned
view(Claims_With_Earned)
library(tidyverse)
view(Claims_With_Earned)
ommitted.na.claims_with_earned <- na.omit(Claims_With_Earned)
ommitted.na.claims_with_earned
total.claims.rf <- randomForest(Claims_With_Earned~., data = ommitted.na.claims_with_earned, importance = TRUE)
total.claims.rf <- randomForest(total_claim_amount ~., data = ommitted.na.claims_with_earned, importance = TRUE)
Claims_With_Earned
glimpse(Claims_With_Earned)
Claims_With_Earned$condition_category
categorical_columns <- Claims_With_Earned %>%
select_if(is.factor)
sapply(categorical_columns, function(x) length(unique(x)))
categorical_columns
number.of.factorlevels <- sapply(categorical_columns, function(x) length(unique(x)))
number.of.factorlevels
which(number.of.factorlevels >= 53)
to.remove <- c(nb_postcode, nb_breed_name_unique, nb_breed_name_unique_concat)
sapply(categorical_columns[,-to.remove], function(x) length(unique(x)))
to.remove <- c("nb_postcode", "nb_breed_name_unique", "nb_breed_name_unique_concat")
sapply(categorical_columns[,-to.remove], function(x) length(unique(x)))
to.remove <- c(nb_postcode, nb_breed_name_unique, nb_breed_name_unique_concat)
sapply(categorical_columns[,-to.remove], function(x) length(unique(x)))
colnames(categorical_columns) %in% to.remove
ommitted.na.claims_with_earned <- na.omit(Claims_With_Earned)
categorical_columns <- ommitted.na.claims_with_earned %>%
select_if(is.factor)
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyverse)
ommitted.na.claims_with_earned <- na.omit(Claims_With_Earned)
categorical_columns <- ommitted.na.claims_with_earned %>%
select_if(is.factor)
sapply(categorical_columns, function(x) length(unique(x)))
rf.training <- ommitted.na.claims_with_earned[,!(colnames(ommitted.na.claims_with_earned) %in% to.remove)]
rf.training
total.claims.rf <- randomForest(total_claim_amount ~., data = rf.training, importance = TRUE)
library(randomForest)
total.claims.rf <- randomForest(total_claim_amount ~., data = rf.training, importance = TRUE)
total.claims.rf
varImpPlot(total.claims.rf)
to.remove <- c("nb_postcode", "nb_breed_name_unique", "nb_breed_name_unique_concat", "claim_paid")
rf.training <- ommitted.na.claims_with_earned[,!(colnames(ommitted.na.claims_with_earned) %in% to.remove)]
total.claims.rf <- randomForest(total_claim_amount ~., data = rf.training, importance = TRUE)
varImpPlot(total.claims.rf)
Claims.Summary <- ommitted.na.claims_with_earned %>%
summarise()
Claims.Summary
Claims.Summary <- summarise(ommitted.na.claims_with_earned)
Claims.Summary
Claims.Summary <- summary(ommitted.na.claims_with_earned)
Claims.Summary <- summary(ommitted.na.claims_with_earned$total_claim_amount)
Claims.Summary
Claims.Summary <- as.data.frame(summary(ommitted.na.claims_with_earned$total_claim_amount))
Claims.Summary <- data.frame(summary(ommitted.na.claims_with_earned$total_claim_amount))
Claims.Summary <- summary(ommitted.na.claims_with_earned$total_claim_amount)
Claims.Summary
Q3.Total.Claims <- 447.525
sapply(categorical_columns, function(x) length(unique(x)))
nrow(ommitted.na.claims_with_earned)
extremeclaimsbybreed<-ommitted.na.claims_with_earned %>%
filter(total_claim_amount >= Q3.Total.Claims) %>%
group_by(nb_breed_name_unique) %>%
summarise(percentage.frequency = n()/nrow(ommitted.na.claims_with_earned))
extremeclaimsbybreed
extremeclaimsbybreed<-ommitted.na.claims_with_earned %>%
filter(total_claim_amount >= Q3.Total.Claims) %>%
group_by(nb_breed_name_unique) %>%
summarise(percentage.frequency = 100*n()/nrow(ommitted.na.claims_with_earned))
extremeclaimsbybreed
top25claimsbybreed <- ommitted.na.claims_with_earned %>%
filter(total_claim_amount >= Q3.Total.Claims) %>%
group_by(nb_breed_name_unique) %>%
summarise(percentage.frequency = 100*n()/nrow(ommitted.na.claims_with_earned))
top5breeds <- top25claimsbybreed %>%
arrange(desc(percentage.frequency)) %>%
slice_hear(n = 5)
top5breeds <- top25claimsbybreed %>%
arrange(desc(percentage.frequency)) %>%
slice_head(n = 5)
top5breeds
plot(top25claimsbybreed$nb_breed_name_unique, top25claimsbybreed$percentage.frequency)
ggplot(top5claimsbybreed, aes(x = reorder(nb_breed_name_unique, percentage.frequency),
y = percentage.frequency)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +  # Flip coordinates for better readability
labs(title = "Top 5 Breeds by Percentage Frequency of Claims",
x = "Breed",
y = "Percentage Frequency") +
theme_minimal()
top10breeds <- top25claimsbybreed %>%
arrange(desc(percentage.frequency)) %>%
slice_head(n = 10)
top10breeds
top10breeds[1,]
top10breeds[,1]
rownames(top10breeds)
rownames(top10breeds) <- top10breeds[,1]
top10breeds
top25claimsbybreed
ggplot(top10breeds, aes(x = reorder(nb_breed_name_unique, percentage.frequency),
y = percentage.frequency)) +
geom_bar(stat = "identity", fill = "steelblue") +  # Create the bars
coord_flip() +  # Flip coordinates for better readability
labs(title = "Top 10 Breeds by Percentage Frequency of Claims",
x = "Breed",
y = "Percentage Frequency (%)") +
theme_minimal() +  # Apply a minimal theme
theme(plot.title = element_text(hjust = 0.5))
top10breeds.bar <- ggplot(top10breeds, aes(x = reorder(nb_breed_name_unique, percentage.frequency),
y = percentage.frequency)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Top 10 Breeds by Percentage Frequency of Claims",
x = "Breed",
y = "Percentage Frequency (%)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
top10breeds.bar <- ggplot(top10breeds, aes(x = reorder(nb_breed_name_unique, percentage.frequency),
y = percentage.frequency)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Top 10 Breeds by Percentage Frequency of Claims for the top 25% of Claims",
x = "Breed",
y = "Percentage Frequency (%)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
top10breeds.bar
top10breeds.bar <- ggplot(top10breeds, aes(x = reorder(nb_breed_name_unique, percentage.frequency),
y = percentage.frequency)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Top 10 Breeds by Percentage Frequency of Claims for the Top 25% of Claims",
x = "Breed",
y = "Percentage Frequency (%)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
Claims_With_Earned
